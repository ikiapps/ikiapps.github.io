<?xml version="1.0" encoding="UTF-8" ?> <rss version="2.0"> <channel><title>ikiApps</title> <description>ikiApps - ikiApps LLC</description><link>http://www.ikiApps.com</link><link>http://www.ikiApps.com</link> <lastBuildDate>2019-11-16T00:57:46+00:00</lastBuildDate> <pubDate>2019-11-16T00:57:46+00:00</pubDate> <ttl>1800</ttl><item><title>Rust as an App Language</title> <description>&lt;p&gt;There is a strong need to work with typical business logic operations in a platform-agnostic manner for increased code re-use, reduced dependencies, and higher performance. Consider Rust. The language is a prime candidate for replacing C++, at large, as a systems language but can it also serve the needs of general consumer applications? This article is written for somebody interested in how Rust can be used by someone with experience in other modernized application programming languages like Swift and Kotlin.&lt;/p&gt;&lt;p&gt;So is Rust good for handling business logic? Is it good as an app language?&lt;/p&gt;&lt;p&gt;I’ve been using the DynamoDB API as a test bed with at least five or six languages now to accumulate data points for my evaluation. The reason behind this exploration is to converge on cohesive techniques for implementing multiplatform architecture based on shared libraries that can support a mostly functional, declarative style of programming.&lt;/p&gt;&lt;p&gt;To be fair, I haven’t given equal consideration to Haskell or OCaml as I don’t have the requirement for a language to be as “purely” functional as they allow. My choices are not based solely on the language but rather the accompanying ecosystem, including community support and package availability. There is also an element of playing with new toys that is hopefully tempered by rational considerations.&lt;/p&gt;&lt;p&gt;I’ll cover the following areas about Rust programming.&lt;/p&gt;&lt;ul&gt; &lt;li&gt;The Rust type system&lt;/li&gt; &lt;li&gt;Futures (synced and async polled)&lt;/li&gt; &lt;li&gt;Iterators&lt;/li&gt; &lt;li&gt;Mapping&lt;/li&gt; &lt;li&gt;Closures&lt;/li&gt; &lt;li&gt;Vec (array-like)&lt;/li&gt; &lt;li&gt;HashMap&lt;/li&gt; &lt;li&gt;Generics&lt;/li&gt; &lt;li&gt;Unit testing&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Rust, with its implicit return values and unit type, is reminiscent of F# to me (without requiring a .NET runtime) while having the ability to control bare metal. This gives it awesome potential for performant functional-style programming. Given the choice between working with a functional, strongly typed, ML-derived, systems language versus an imperative, weaker typed, Algol-based one, the former has significant advantages when it comes to developing programs that can evolve over time. It is due to supporting more of a bottom-up approach through functional composition rather than one that is top-down via duck-typed class hierarchies.&lt;/p&gt;&lt;div style="width: 80%; margin-left: auto; margin-right: auto;"&gt; &lt;hr /&gt; &lt;img src="/img/2019-07-26-is-rust-good-for-apps/is-rust-good-for-apps.png" alt="Rust logo" width="50%" /&gt; &lt;hr /&gt; &lt;/div&gt;&lt;h2 id="and-now-rust"&gt;And now Rust&lt;/h2&gt;&lt;p&gt;After comparing many different languages and their ecosystems, I’m ready to give a little more time to Rust. A language should serve as a tool for what one wishes to express. Philosophically, Rust matches my preferences along with having the potential for high performance, runtime safety, and interoperability (via C bindings) with environments for other languages.&lt;/p&gt;&lt;p&gt;While there is no official AWS SDK for Rust, the Rusoto project seems stable and comprehensive enough for real use. The examples herein make use of it where I have limited them to a single operation, deleting tables, because I found numerous ways to approach this single problem that led me on a path of learning. I’ll show how my individual functions evolved to fit my expanding requirements.&lt;/p&gt;&lt;p&gt;The AWS DynamoDB API uses inputs and outputs. They are used similarly in the AWS SDKs for other platforms. For deleting a table, a delete &lt;em&gt;input&lt;/em&gt; is made that is passed to the delete command. Upon execution, a delete &lt;em&gt;output&lt;/em&gt; is available. This is what it looks like in Rust:&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;delete_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DeleteTableInput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;delete_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;deleted&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;The sync indicates a thread-blocking operation. The underscore in front of output says I’m ignoring that value, for now. The delete table input creation is in shorthand form because there is a matching local &lt;code&gt;table_name&lt;/code&gt; argument in name and type. The result gives a &lt;code&gt;Result&amp;lt;DeleteTableOutput, RusotoError&amp;lt;DeleteTableError&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In just a single function, one can get a feel of how explicit the type handling is under the Rust type system. There is some shortening of the need to specify everything through type inference but the compiler still treats each type strictly.&lt;/p&gt;&lt;p&gt;To get started, I’m returning a tuple of strings consisting of the table name and a descriptive message. Due to ownership rules where a value can be moved among owners, the string reference (&amp;amp;str) is converted to an opaque value when needed. String literals default to &lt;code&gt;&amp;amp;str&lt;/code&gt; instead of std:string::String. This may seem strange at first, but it ends up being a sensible choice given how ownership and borrowing work.&lt;/p&gt;&lt;h2 id="multiple-tables"&gt;Multiple tables&lt;/h2&gt;&lt;p&gt;Now that one table can be deleted, the next logical step is be able to delete any number of tables. Perhaps, one of the most familiar ways is to use a for-in loop like so:&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;delete_tables_by_for_in&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;all_tables&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delete_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;In case loops are not desired, mapping also works and the results can be collected into a growable, array-like structure called a &lt;code&gt;Vec&lt;/code&gt;.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;delete_tables_by_map&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deleted&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;all_tables&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delete_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{:?}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deleted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Nothing too difficult there, right?&lt;/p&gt;&lt;h2 id="transitioning-to-asynchronous-polling"&gt;Transitioning to asynchronous polling&lt;/h2&gt;&lt;p&gt;Blocking operations are good for testing but may not be sufficiently flexible for performance and user experience in production.&lt;/p&gt;&lt;p&gt;The underlying type for these actions is &lt;code&gt;RusotoFuture.&lt;/code&gt; It is an implementation of a futures::future::Future (distinct from a std::future::Future), a trait that contains the two associated types, Item and Error.&lt;/p&gt;&lt;p&gt;&lt;a name="delete_table_future"&gt;&lt;/a&gt; The delete table Future can be written as a function where the implementation is its return type:&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;delete_table_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DeleteTableOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RusotoError&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DeleteTableError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;make_input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DeleteTableInput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;: &lt;span class="nc"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;delete_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Futures do not perform actions until polled. Therefore, this can be considered the declarative form of the previous imperative version that called sync().&lt;/p&gt;&lt;p&gt;To use this, my first thought was to map the results into a Vec. I show a nonworking attempt below that is not compilable but shows what were my intentions.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 👎 Non-working attempt to run futures.&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;nonworking_delete_tables_with_future_by_map&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DeleteTableOutput&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;all_tables&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delete_table_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;The idea was to collect the DeleteTableOutputs into a Vec. However, &lt;code&gt;map&lt;/code&gt; was not successful for getting a Future to run. Instead, there is a runner in tokio_core::reactor::Core. It takes the future as an argument (passed by value, i.e. not a pointer).&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;run_delete_table_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RusotoError&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DeleteTableError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Core&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delete_table_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;I start to return the actual error (instead of a string) here as the second member of the return tuple. These tuples can be collected nicely into a HashMap where a delete table call function can now be written as:&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;tables_deleted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RusotoError&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DeleteTableError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;all_tables&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run_delete_table_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Is that not more beautifully compact considering where we started? I think so, but there’s more that can be done.&lt;/p&gt;&lt;h2 id="generics---for-the-ability-to-repeat-yourself-less"&gt;Generics - For the ability to repeat yourself less&lt;/h2&gt;&lt;p&gt;In a real app, there is a need to support large numbers of unique, but similar, DB operations. Do we have to make a separate runner for each one? Or is there a way to handle them generically? If the Future can be passed as a function parameter, then a single runner can be used for all of them, in general. The next function illustrates the result of reasoning out a way to make the runner more generic.&lt;/p&gt;&lt;p&gt;Due to the contract in the Future trait, there’s a little, helpful path syntax that can be used to get to the error in anything that implements it. For example, if there’s a generic type U, U::Error gets the error. To start with, we’ll collect the errors from a generic future runner by letting our previous return type of DeleteOutputError be generically determined by placing the generic type in the return value position of the Future calling function reference that is passed in as an argument to the runner.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;run_future_generically&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_future&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;Fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;U&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;::&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;: &lt;span class="nc"&gt;futures&lt;/span&gt;::&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Core&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_future&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;I’m having the runner return an Option through the pattern matching on the result of the Future. This is for convenience later to separate the operations that have errors. Setting the generic condition or constraint (trait bound), that U is a Future, ensures that only Errors from a Future will be returned. This seems like an enormous improvement to writing a separate runner for each DB operation, doesn’t it?&lt;/p&gt;&lt;p&gt;It allows passing delete_table_future, or some other operation, directly into the runner where the runner, itself, only has to deal with an Item and an Error. That effectively provides all the benefits of separating responsibilities without requiring any hierarchical OOP structure (instead being interface-mediated behaviors) and it works for all the DB operations that can be represented as a Future.&lt;/p&gt;&lt;p&gt;This is a &lt;em&gt;major turning point&lt;/em&gt; in that the details of running each operation are no longer a separate implementation, or function, as they might be without generics. I can simply declare all behavior in the function that is passed in. If I just want to know delete table errors, then I can set that as the return type, as below.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;tables_deleted_generically&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RusotoError&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DeleteTableError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;all_tables&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run_future_generically&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delete_table_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;For convenience, I’ve collected the errors into a Vec. What if we want to also have the DeleteTableOutput for knowing things like the table name according to my original returning of strings? From all the previous definitions, hopefully, it can be seen quite clearly how to do this.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;tables_deleted_generically&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DeleteTableOutput&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RusotoError&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DeleteTableError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;all_tables&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run_future_generically&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;delete_table_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;The return type is modified to include the Future output contained in its Item property. This change requires a little corresponding modification to the runner function.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;run_future_generically&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_future&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;Fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;U&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;::&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;::&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;: &lt;span class="nc"&gt;futures&lt;/span&gt;::&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Core&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_future&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;In summary, along with being able to automatically handle the return type (via generics), there is no dependency on the size or shape of the Future that is passed in. This is possible because there are zero input arguments (arity 0) on &lt;code&gt;some_future&lt;/code&gt; in the runner. 🎉 The implementation details are completely encapsulated in the closure reference to &lt;a href="#delete_table_future"&gt;delete_table_future&lt;/a&gt; 🎉.&lt;/p&gt;&lt;p&gt;We now have the full result of any Future, wrapped in Options for convenience. Nearly any kind of operation can be performed on the DB, generically! This solution has been derived entirely through the algebra of types. Finally, evaluation of the results (such as for testing) can be accomplished by destructuring the Option pairs:&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#[test]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;test_generic_future_call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tables_deleted_generically&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;❌ {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_description&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;⚠️&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;I test this using:&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span&gt;&lt;/span&gt;$ cargo &lt;span class="nb"&gt;test&lt;/span&gt; --color&lt;span class="o"&gt;=&lt;/span&gt;always --package ddb_rust --test db_tests tests::test_generic_future_call -- --nocapture --exact&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;with nocapture specified to allow output to stdout.&lt;/p&gt;&lt;p&gt;For reference, the following dependencies were used for the previous examples with Rust 1.36.0 (2018 edition).&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-toml" data-lang="toml"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;rusoto_core&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.40.0&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;rusoto_dynamodb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.40.0&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;futures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^0.1&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;tokio-core&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^0.1&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id="conclusions"&gt;Conclusions&lt;/h2&gt;&lt;p&gt;Deriving the functions that fulfill the requirements of this project consisted entirely of forming type relationships that satisfy the compiler. What we get is relatively deterministic runtime behavior that can be tested and verified with the opportunity to handle any errors. Is it, therefore, more efficient to write programs in Rust?&lt;/p&gt;&lt;p&gt;Compared to a similar implementation in Go or C++, I’d argue that Rust provides an alternative that reduces overhead both upfront during implementation and in terms of maintenance over time. Regarding style, I was able to express nearly exactly what I wanted. This is &lt;em&gt;unlike Go,&lt;/em&gt; where more effort is required by me to fit that language with what I want to express. I believe equivalent functions could be rendered with C++ templates but, perhaps, without nearly as much help from the compiler.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;There is a cost in arriving at the right level of abstraction when applying a bottom-up approach to any given problem. But my experience has indicated this can be successful way to develop a solution that can be readily extended as new requirements are formed, especially with respect to composing functions, or functional units.&lt;/p&gt;&lt;p&gt;Rust aids this process, because we get inherently consistent runtime safety and behaviors due to the pervasive type system and explicit memory model. This benefit comes at little additional cost. In other words, once you can wrap your head around this programming style, Rust can offer major engineering advantages compared to the typical drawbacks of other languages and ecosystems.&lt;/p&gt;&lt;p&gt;It’s interesting to note that most of the dependencies I’m using appear to be under active development. I’m happy to report that package management has been a seamless experience. This is likely due to the excellence of the Cargo crate system even though &lt;code&gt;Cargo.lock&lt;/code&gt; seems breathtakingly long (due to Rusoto’s dependencies) for my small amount of code. However, I’m confident build optimizations will be available when I’m ready for them.&lt;/p&gt;&lt;p&gt;In summary, Rust has:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Great function re-usability and composability&lt;/li&gt; &lt;li&gt;Outstanding capacity to express abstract types and relationships that are enforced by the compiler (unlike Go)&lt;/li&gt; &lt;li&gt;Runtime safety assurances reinforced by the type system&lt;/li&gt; &lt;li&gt;Bare-metal control features&lt;/li&gt; &lt;li&gt;Polished dependency management (unlike C++)&lt;/li&gt; &lt;li&gt;Built-in testing (unlike C++)&lt;/li&gt; &lt;li&gt;Precise error messages during compilation&lt;/li&gt; &lt;li&gt;Support for both functional and imperative programming styles&lt;/li&gt; &lt;li&gt;A foreign function interface (FFI)&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Overall, writing Rust does not feel extremely different from any other modern programming language. A sufficient background in protocol oriented programming in Swift can be good preparation due to its type system having high compatibility with Rust’s Traits. With so much going for it, I predict that it can have an extraordinary future based on having a design that addresses some of the biggest problems in software engineering.&lt;/p&gt;&lt;p&gt;Unfortunately, there is much software in the world not built to the same standard as what is produced by the Rust compiler. From inherently unsafe memory models that can lead to security breaches to more devastating errors that can result in loss of life, how software is built &lt;em&gt;matters.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The primary effort in Rust, for me, is the algebra of static types. But I don’t see this as a barrier to adoption. Rather, it is about being willing to invest in the kind of process that I’ve shown. The stunning part is that this skill is transferable to other programming environments. Therefore, the potential dividends seem higher than the cost of learning. That kind of value seems &lt;em&gt;rare and wonderful&lt;/em&gt; in a field that regularly evaluates the trade-offs in its available options.&lt;/p&gt;&lt;hr /&gt;&lt;div class="footnotes"&gt; &lt;ol&gt; &lt;li id="fn:1"&gt; &lt;p&gt;C++ seems to have the capability to do just about anything that other languages can while, somehow, maintaining the style of mostly unmodern C syntax.&amp;nbsp;&lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; </description><link>http://www.ikiApps.com/programming/2019/07/26/is-rust-good-for-apps</link> <guid>http://www.ikiApps.com/programming/2019/07/26/is-rust-good-for-apps</guid> <pubDate>2019-07-26T00:00:00+00:00</pubDate> </item><item><title>Multiplatform Architecture</title> <description>&lt;p&gt; &lt;figure class="image"&gt;&lt;img src="/img/2019-06-23-multiplatform-architecture-with-shared-libraries/multiplatform-architecture-diagram-2.png" alt="Figure 1: An architecture based on shared libraries in a middleware layer (with an optional shared view model) to serve delivery of client apps to multiple native platform targets." /&gt; &lt;figcaption&gt;&lt;strong&gt;Figure 1: An architecture based on shared libraries in a middleware layer (with an optional shared view model) to serve delivery of client apps to multiple native platform targets.&lt;/strong&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;/p&gt;&lt;p&gt;Reaching users is a quintessential way of growing technology products. Time to market efficiency is a vital consideration for a business seeking to validate new ideas.&lt;/p&gt;&lt;p&gt;For consumer apps, that means making versions quickly available on a diversity of major target platforms such as:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Android&lt;/li&gt; &lt;li&gt;iOS/iPadOS/watchOS&lt;/li&gt; &lt;li&gt;Windows&lt;/li&gt; &lt;li&gt;The Web&lt;/li&gt; &lt;li&gt;macOS&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="shared-libraries-as-a-middleware-foundation"&gt;Shared libraries as a middleware foundation&lt;/h2&gt;&lt;p&gt;There are various ways to go about delivering solutions to multiple platforms efficiently. I want to highlight an architecture based on shared libraries, situated in a middleware role between backend services and native clients, as one strategy to consider when seeking the following advantages:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Code re-use at the data model handling and business logic level.&lt;/li&gt; &lt;li&gt;Serve a preference for a single programming language or a set of languages.&lt;/li&gt; &lt;li&gt;Freedom from target platform constraints through effective dependency handling.&lt;/li&gt; &lt;li&gt;Plays nice with backend resources.&lt;/li&gt; &lt;li&gt;Supports a workflow conducive to overall productivity.&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="requirements-of-shared-libraries"&gt;Requirements of shared libraries&lt;/h2&gt;&lt;p&gt;In choosing what technologies to invest in, there are several factors to consider. These can include:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;The capability for implementing most business logic with sufficient expressiveness and desired style.&lt;/li&gt; &lt;li&gt;Having an API surface sufficient for native platform interfacing with the right balance of embeddability (access to language features and packages) and performance (memory and processing).&lt;/li&gt; &lt;li&gt;Being free of interoperability restrictions, either technical or political in nature.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;While I am considering this architecture in general terms, the target platform tending to have the most restrictions is iOS. Therefore, much of my evaluation is based on how well a chosen foundation can be integrated with that operating system.&lt;/p&gt;&lt;h2 id="programming-language-options"&gt;Programming language options&lt;/h2&gt;&lt;p&gt;When it comes to writing code, a programming language sets the stage for what can be expressed. We all have our individual preferences and they are an important factor to consider for both reasons of style and productivity. In a shared library situation, there are additional concerns of interoperability and package availability to extend base language functionality, as needed.&lt;/p&gt;&lt;p&gt;Some possible languages for generating multiplatform shared libraries are:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;C&lt;/li&gt; &lt;li&gt;C++&lt;/li&gt; &lt;li&gt;JavaScript&lt;/li&gt; &lt;li&gt;Swift&lt;/li&gt; &lt;li&gt;Kotlin (generate with Kotlin/Native)&lt;/li&gt; &lt;li&gt;C#/F# (generate with .NET Embedding)&lt;/li&gt; &lt;li&gt;Rust&lt;/li&gt; &lt;li&gt;Go (aka golang) (generate with Go on Mobile)&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;C is one of the most portable languages but without much support for modern programming paradigms. C++ seems capable of doing just about anything but has a style and complexity that is not for everyone. This situation continues to evolve with further iterations of the language. However, in scenarios where undisputed control over system resources is needed, C/C++ are prime choices.&lt;/p&gt;&lt;p&gt;JavaScript is a surprisingly powerful language with regard to expressiveness especially in terms of functional programming. Being not compiled by default means that it generally requires a runtime engine. That is a constraint that can hinder its effectiveness with regard to interoperability.&lt;/p&gt;&lt;p&gt;Swift may not be considered as a contender by those outside of the Apple ecosystem. Being aligned with one of the most restrictive platforms is something that may be a major drawback when it comes to filling a multiplatform role. Also, package availability may not be nearly as expansive as in other ecosystems.&lt;/p&gt;&lt;p&gt;Kotlin takes the next step by offering compilation of its code to native libraries via Kotlin/Native. One of its best features, interoperability with Java, &lt;em&gt;may also be one of its worst,&lt;/em&gt; in terms of overall potential as a multiplatform language. This is due to decreased incentive for package creators to deliver pure Kotlin editions when there is a Java version available and that Kotlin/Native is not able to import Java.&lt;/p&gt;&lt;p&gt;C#/F# has a heavy association with Windows and that might be a turn-off for those unaware of .NET’s new open-source direction. With .NET Embedding, these languages may provide the right level of expressiveness along with embeddability and utility matched by one of the richest software ecosystems in the world.&lt;/p&gt;&lt;p&gt;Finally, when it comes to finding the right blend of performance and expressivity, Go (golang) and Rust may be the ideal candidates due to having the much of the control of C/C++, by virtue of being systems-level languages, with a more modern, refined (less-encumbered) approach. Between the two, Go seems to be more opinionated in its idioms, while Rust offers support for a greater variety of programming styles.&lt;/p&gt;&lt;h2 id="further-considerations"&gt;Further considerations&lt;/h2&gt;&lt;p&gt;Ideally, what is wanted is modern expressiveness, high performance, and significant community support on multiple platforms where choosing a language doesn’t require trading capability for convenience or declaring allegiance to a corporate monopoly. In reality, there are numerous trade-offs for any given choice, or set thereof, such as the following concerns:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Programmer abilities&lt;/li&gt; &lt;li&gt;Memory requirements&lt;/li&gt; &lt;li&gt;Computational performance&lt;/li&gt; &lt;li&gt;Interoperability overhead&lt;/li&gt; &lt;li&gt;Threading-model compatibility&lt;/li&gt; &lt;li&gt;Garbage collecting needs&lt;/li&gt; &lt;li&gt;Types to be exchanged&lt;/li&gt; &lt;li&gt;Exception handling&lt;/li&gt; &lt;li&gt;Package import limitations&lt;/li&gt; &lt;li&gt;CPU optimizations&lt;/li&gt; &lt;li&gt;Code expressiveness&lt;/li&gt; &lt;li&gt;Platform restrictions&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="evaluating-the-choices"&gt;Evaluating the choices&lt;/h2&gt;&lt;p&gt;One way to go about evaluating these options is to implement a project suitable to representing actual usage in each language. To that end, I created a sample project for my candidates where the goal was to produce a multiplatform compatible library capable of performing create, read, update and delete (CRUD) operations on DynamoDB that &lt;strong&gt;can be natively called from all of my target platforms.&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="conclusions-tentative"&gt;Conclusions (tentative)&lt;/h2&gt;&lt;p&gt;The hard work to gain the necessary experience with multiple language options for shared libraries is something that each engineer must do for themselves to be able to make a meaningful comparison according to their capabilities and preferences.&lt;/p&gt;&lt;p&gt;My findings indicate that only compiled solutions are feasible for my requirements of performance, portability and increased freedom from additional runtime dependencies. Sorry, JavaScript, I don’t have an engine for you to run on.&lt;/p&gt;&lt;p&gt;In summary, there are additional considerations to take into account such as:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Management of additional compilation steps (e.g. JIT or AOT)&lt;/li&gt; &lt;li&gt;Supporting ecosystem (especially the availability of packages/libraries)&lt;/li&gt; &lt;li&gt;Interoperability with existing environment&lt;/li&gt; &lt;li&gt;Programming style (not to be underestimated)&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Having evaluated C#, Kotlin (with Java), C++, Rust and Go (golang), my tentative conclusion is that all are potentially viable to serve as the language foundation for a shared library approach to multiplatform architecture. There are some limitations that will be deciding factors during actual project execution.&lt;/p&gt;&lt;p&gt;Choosing compiled solutions is still not a binary decision when it comes to adjusting to the nuances of multiplatform interoperability. For example, with .NET, the compiler produces an intermediate compilation that can be fed into a JIT compiler. From there, native code can be generated. In other words, there’s much more going on between the source and the final compiled product. There were also Xamarin dependencies that I found to be an issue when wishing to test with NUnit.&lt;/p&gt;&lt;p&gt;Sometime in the future, .NET Embedding (Embeddinator-4000) may present itself as an ideal multiplatform library generator. This is due in no small part to the large collection of libraries that can extend a C#/F# implementation. However, this technology does not yet seem to be ready for general use, lacking such features as complete debugging and additional work required to manage the Mono framework linked to host apps.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;On the Java side, particularly impacting non-JVM environments like iOS, Java-based libraries are not available to Kotlin/Native. This is a major limitation that negates much of its usefulness in a general purpose shared library role even though it may still be a much improved way to work with Java. Being a first-class Android language is also a strong factor to weigh in its favor.&lt;/p&gt;&lt;p&gt;For the present, C++ is probably still the tried and true favorite with regard to interoperability and performance. But, alas, it is a language weighed down heavily by its roots and requires programming in a way much different from other modern languages.&lt;/p&gt;&lt;p&gt;Go (golang) can be considered an improvement over some of those limitations in C++. I’m still evaluating its interoperation capabilities. Provisionally, the ability to produce iOS frameworks via “Go Mobile” or “Go on Mobile” seems promising and it may become the leader with regard to my preferences for a multiplatform library generator. It may be easier to interoperate with Go than Rust.&lt;/p&gt;&lt;p&gt;There is growing support for multiplatform approaches among most major programming language ecosystems. Aside from C/C++, multiplatform library generators like Kotlin/Native, .NET Embedding and Go Mobile still have ground to cover before being production-quality solutions. If you are ready to take the plunge into a general multiplatform shared library architecture, C++ is probably the safest choice with Rust and Go (golang) being the next most promising options from my perspective.&lt;/p&gt;&lt;hr /&gt;&lt;div class="footnotes"&gt; &lt;ol&gt; &lt;li id="fn:1"&gt; &lt;p&gt;As of 2019-11-10, I would not consider .NET Embedding (aka the Embeddinator project) to be suitable for production use due to lack of active development. See &lt;a href="https://docs.microsoft.com/en-us/xamarin/tools/dotnet-embedding/release-notes/preview/0.4"&gt;.NET Embedding 0.4 release notes&lt;/a&gt; corresponding to the last release on 2017-04-18.&amp;nbsp;&lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; </description><link>http://www.ikiApps.com/software-architecture/2019/06/23/multiplatform-architecture-with-shared-libraries</link> <guid>http://www.ikiApps.com/software-architecture/2019/06/23/multiplatform-architecture-with-shared-libraries</guid> <pubDate>2019-06-23T00:00:00+00:00</pubDate> </item><item><title>Kotlin for Concise JSON Pre-Processing</title> <description>&lt;div style="width: 80%; margin-left: auto; margin-right: auto;"&gt; &lt;hr /&gt; &lt;img src="/img/2019-05-29-kotlin-json-processing/uber-open+close.png" alt="UBER: open vs close" width="100%" /&gt; &lt;hr /&gt; Figure 1: UBER open vs close. Raw stock price data was pre-processed, or transformed, with a Kotlin program and exported to a CSV format. The results were then plotted. Data source: &lt;a href="https://www.alphavantage.co/"&gt;Alpha Vantage&lt;/a&gt;. &lt;/div&gt;&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;&lt;p&gt;Data is a fundamental part of the modern world. The following stock data is for &lt;code&gt;UBER&lt;/code&gt; as traded on the NYSE.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{ "Meta Data": { "1. Information": "Daily Time Series with Splits and Dividend Events", "2. Symbol": "UBER", "3. Last Refreshed": "2019-05-28", "4. Output Size": "Compact", "5. Time Zone": "US/Eastern" }, "Time Series (Daily)": { "2019-05-28": { "1. open": "41.7000", "2. high": "41.8000", "3. low": "40.6000", "4. close": "40.9500", "5. adjusted close": "40.9500", "6. volume": "12509106", "7. dividend amount": "0.0000", "8. split coefficient": "1.0000" }, "2019-05-24": { "1. open": "41.2800", "2. high": "41.5100", "3. low": "40.5000", "4. close": "41.5100", "5. adjusted close": "41.5100", "6. volume": "8786751", "7. dividend amount": "0.0000", "8. split coefficient": "1.0000" }, &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It consists of a series of nested JSON objects (or dictionaries, or maps, depending on your point of reference). How would you go about parsing this data to extract a series of prices where there may be hundreds of days?&lt;/p&gt;&lt;p&gt;Normally, I would choose something like Python or JavaScript to handle this kind of pre-processing. However, for the purpose of evaluation and learning, I chose to use &lt;strong&gt;Kotlin.&lt;/strong&gt; I will show what I had to go through not being familiar with this trending language but having experience with other languages. I also decided to use the Klaxon JSON parser so I would I have a relatively nontrivial experience as compared to a Hello World that doesn’t require dependencies.&lt;/p&gt;&lt;h1 id="getting-started"&gt;Getting started&lt;/h1&gt;&lt;p&gt;My goal was to do a kind of test driven development by running my experiment through a test runner.&lt;/p&gt;&lt;p&gt;Since Kotlin is made by JetBrains, IntelliJ IDEA makes for a natural IDE choice to start with. Choosing File &amp;gt; New &amp;gt; Project &amp;gt; Kotlin didn’t give me a clue about how to setup testing in Kotlin. Neither did File &amp;gt; New &amp;gt; Project &amp;gt; Gradle &amp;gt; Kotlin/JVM. Both approaches didn’t include a template for running tests.&lt;/p&gt;&lt;p&gt;After fumbling a bit, I stumbled onto &lt;code&gt;gradle init&lt;/code&gt; and found it produced a testing target. The following is the result of my init.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ gradle initStarting a Gradle Daemon (subsequent builds will be faster)Select type of project to generate: 1: basic 2: cpp-application 3: cpp-library 4: groovy-application 5: groovy-library 6: java-application 7: java-library 8: kotlin-application 9: kotlin-library 10: scala-library Enter selection (default: basic) [1..10] 8Select build script DSL: 1: groovy 2: kotlin Enter selection (default: kotlin) [1..2] 2Project name (default: kotlin-json-processor): Source package (default: kotlin.json.processor): com.ikiapps.kotlinJSONProcessorBUILD SUCCESSFUL in 44s 2 actionable tasks: 2 executed &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thereafter, I was able to import my manually created project into IntelliJ and see the &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; directories within it. I was then able to run the bundled test in the test runner! I felt like I made great progress at this point but ran into other problems.&lt;/p&gt;&lt;h1 id="dependency-management"&gt;Dependency management&lt;/h1&gt;&lt;p&gt;The installation documentation for Klaxon consists of the following text.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;repositories { jcenter() }dependencies { implementation 'com.beust:klaxon:5.0.1' } &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It doesn’t specify where to put that. After some poking around, the Gradle Kotlin DSL file &lt;code&gt;build.gradle.kts&lt;/code&gt; seemed like the right place.&lt;/p&gt;&lt;p&gt;Did I mention that Gradle can be daunting to the uninitiated? Considering it’s a cross-platform build system &lt;em&gt;and&lt;/em&gt; dependency manager, it’s covering a whole lot of bases. It seems quite powerful in its range of capabilities.&lt;/p&gt;&lt;h1 id="programming"&gt;Programming&lt;/h1&gt;&lt;p&gt;Getting down to coding after solving the build and dependency management overhead was exciting. The next big challenge was understanding Kotlin types. Not having a significant Java background probably slowed me down. However, I’ve been doing so much Swift that static types are a perfectly comfortable concept.&lt;/p&gt;&lt;p&gt;Some of my first attempts to parse the JSON are listed below along with my comments.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;data1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Klaxon&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// This just tried to parse the filename.&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;data2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Klaxon&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;StringReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// What&amp;#39;s a Reader? I think that&amp;#39;s what I need.&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;data3&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Klaxon&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;readText&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// Oh, there&amp;#39;s a readText(). Why didn&amp;#39;t this work? It seems it&amp;#39;s the wrong parse call even though the types match.&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;data4&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Klaxon&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;parseJsonObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;readText&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="c1"&gt;// There we go. I get two keys as a result.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Having obtained a syntax allowing me to extract the top-level keys in the JSON data, &lt;code&gt;Meta Data&lt;/code&gt; and &lt;code&gt;Time Series (Daily)&lt;/code&gt;, I was hopeful that I’d be able to get out more. I thought that it would be nice if the days were arranged in an array than I could do a &lt;code&gt;parseArray&lt;/code&gt; and iterate over the members.&lt;/p&gt;&lt;p&gt;With further experimenting, it turned out the nested dictionaries weren’t as terrible as they first seemed. I found I could get the time series data by filtering on my parse results to isolate the time series and then map it to get a result. My code is below and note how a &lt;code&gt;return&lt;/code&gt; statement is not used.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;parsed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;klx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseJsonObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;timeSeries&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;dataKey&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;JsonObject&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;My result in &lt;code&gt;timeSeries&lt;/code&gt; is another &lt;code&gt;JsonObject&lt;/code&gt;, as defined by Klaxon. I tried many of the many variations of the parse function variations, found in Klaxon, on this object until I came onto &lt;code&gt;parseFromJsonObject(JsonObject)&lt;/code&gt;. That function allowed parsing the already parsed JSON text now represented as a &lt;code&gt;JsonObject&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Since everything I was interested in was in the first (read that as “only”) filtered member, I could pull it and “forEach” the days. I read about data classes in the docs and it took me some time to figure out how to put them into play. They are essentially a model of the data you are working with and can be used during extraction.&lt;/p&gt;&lt;p&gt;The code form eventually looked like the following snippet:&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;timeSeries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;day&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;klx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseFromJsonObject&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Daily&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;JsonObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;where a &lt;code&gt;Daily&lt;/code&gt; is defined as&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Daily&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;@Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1. open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;@Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2. high&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;high&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;@Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3. low&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;low&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;@Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;4. close&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;close&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;@Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;5. adjusted close&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;adjustedClose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;@Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;6. volume&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;volume&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;@Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;7. dividend amount&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dividendAmount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;@Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8. split coefficient&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;splitCoefficient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Since all the key-value pairs were defined as &lt;code&gt;String: Any&lt;/code&gt;, I wasn’t going to be able to use types to separate the individual elements. My goal was to recursively descend each day member in the JSON tree while being able to access individual days.&lt;/p&gt;&lt;p&gt;I liked being able to define a data schema for only the part I was interested in. It would have been tedious to model the entire data structure just to get the dailies. The &lt;code&gt;@Json&lt;/code&gt; annotations, provided by Klaxon, were elegant at handling key name mappings.&lt;/p&gt;&lt;h1 id="interlude"&gt;Interlude&lt;/h1&gt;&lt;p&gt;I wrote tests but had yet to assert anything. I chose to add a check on the count of days with:&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;@Test&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;testParseDaily1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cnt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dataKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Time Series (Daily)&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;klx&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Klaxon&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;readText&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;parsed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;klx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseJsonObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;timeSeries&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;dataKey&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;JsonObject&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;timeSeries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;day&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;klx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseFromJsonObject&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Daily&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;JsonObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Expected fall-through.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;What happened, at first, is that my test failed because it fell through due to async processing. Therefore, I setup a little blocking or an async-await pattern to handle this via Kotlin coroutines.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;waitForCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;parseDaily&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;await&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;parseDaily&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dataKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Time Series (Daily)&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;klx&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Klaxon&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;readText&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;parsed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;klx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseJsonObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;timeSeries&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;dataKey&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;JsonObject&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="py"&gt;days&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Daily&lt;/span&gt;&lt;span class="p"&gt;?&amp;gt;()&lt;/span&gt; &lt;span class="n"&gt;timeSeries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;rslt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;klx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseFromJsonObject&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Daily&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;JsonObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rslt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;@Test&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;testAsyncDailyCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;waitForCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h1 id="more-functional"&gt;More functional&lt;/h1&gt;&lt;p&gt;That’s not bad. I was able to make an &lt;code&gt;ArrayList&lt;/code&gt; of the daily data I was interested in. However, this still felt a bit too imperative for my tastes. If I could somehow return the count of days without having to loop over an intermediate data structure, I might be able to factor out the async-await by having my assertion be performed on the result of a single operation chain. Here’s what I came up with:&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;@Test&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;testParseDaily2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;expected&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;klx&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Klaxon&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dataKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Time Series (Daily)&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="py"&gt;days&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;klx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseJsonObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;readText&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;dataKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;JsonObject&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;klx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseFromJsonObject&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Daily&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;JsonObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Bad count of &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, expected &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;If you had answered the question of how you would do this, would your method involve more or less code? I’d be challenged to come up with a more concise result as the number of calls in this parsing chain can map 1:1 to the number of levels of data that are being descended. I’ve shared &lt;a href="https://github.com/ikiapps/kotlin-json-processor"&gt;my version on GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;&lt;p&gt;One of the primary advantages heralded by Kotlin is &lt;strong&gt;concision.&lt;/strong&gt; Yes, that’s actually a word and it means what it sounds like. Any programmer should be skeptical about such claims as programming has been going on for a long time and there’s only so much more that can be squeezed out. However, in this case, I’m inclined to be impressed.&lt;/p&gt;&lt;p&gt;Compared to alternative means of parsing an arbitrary nested data structure, what I was able to achieve with Kotlin has sold me on its promise to be concise. That translates into programming efficiency and enjoyment. Therefore, I see great potential in applying this compiled, statically-typed language to my one-off data pre-processing needs that would have typically been served by more dynamic scripting environments.&lt;/p&gt;&lt;p&gt;I’ve shown there is a bit of overhead in terms of setting up Gradle but it is similar in comparison to some of the alternatives I’m familiar with in other ecosystems such as&lt;/p&gt;&lt;ul&gt; &lt;li&gt;CMake (C/C++)&lt;/li&gt; &lt;li&gt;Npm/Yarn (JavaScript)&lt;/li&gt; &lt;li&gt;Carthage/CocoaPods (iOS/macOS)&lt;/li&gt; &lt;li&gt;Virtualenv/Pip (Python)&lt;/li&gt; &lt;li&gt;NuGet (.NET)&lt;/li&gt; &lt;li&gt;Go modules (golang)&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;It gives access to everything in the Java world and dependency handling feels precise and clean. Overall, it seems capable of addressing the needs of projects far more complex than this one.&lt;/p&gt;&lt;p&gt;In summary, Kotlin plus Gradle seems to hit a sweet spot (especially w.r.t. improving Java) among some of the other cross-platform, compiled options such as Xamarin (C#/F#) and Swift. And it just may beat out the scripting languages (JavaScript/Python) as I’ve learned by venturing into this previously uncharted, by me, territory. At this point, that seems like a better bet than &lt;code&gt;UBER&lt;/code&gt;.&lt;/p&gt;</description><link>http://www.ikiApps.com/programming/2019/05/29/kotlin-json-processing</link> <guid>http://www.ikiApps.com/programming/2019/05/29/kotlin-json-processing</guid> <pubDate>2019-05-29T00:00:00+00:00</pubDate> </item><item><title>Drag-and-Drop for macOS in F#</title> <description>&lt;p&gt; &lt;figure class="image"&gt;&lt;img src="/img/2018-08-20-drag-and-drop-mac-fsharp/dndintowindow.png" alt="Figure 1: Dragging-and-Dropping multiple files into a window from the Finder." /&gt; &lt;figcaption&gt;&lt;strong&gt;Figure 1: Dragging-and-Dropping multiple files into a window from the Finder.&lt;/strong&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;/p&gt;&lt;p&gt;File handling can be accomplished through scripts and the command line but there is a satisfaction and practicality to the desktop metaphor that cannot be denied. This post is about implementing multiple file drag-and-drop, the non-deprecated way, from the Finder in macOS with F#.&lt;/p&gt;&lt;h3 id="what-can-you-get-from-this"&gt;What can you get from this?&lt;/h3&gt;&lt;p&gt;A real Mac app created with Visual Studio for Mac and Xamarin that can process multiple files dragged into it from the Finder.&lt;/p&gt;&lt;h3 id="who-is-this-written-for"&gt;Who is this written for?&lt;/h3&gt;&lt;p&gt;This article is written for someone having at least a little iOS/macOS SDK experience and who as an interest in life outside of the beautiful, walled garden of those SDKs.&lt;/p&gt;&lt;h3 id="why-f"&gt;Why F#?&lt;/h3&gt;&lt;p&gt;Statically typed functional programming (FP) tends to lead to more correct software due to its logic being being more mathematical along with some additional benefits including the following:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;The compiler becomes your friend because of strong types.&lt;/li&gt; &lt;li&gt;Favoring pure functions reduces side-effects, that can make debugging/maintenance difficult.&lt;/li&gt; &lt;li&gt;Reduction in the overall quantity of code.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;FP may also expand your ingrained imperative programming thought processes so that working with functional paradigms becomes more natural.&lt;/p&gt;&lt;p&gt;Of all the functional languages, F# allows targeting a wide range of mainstream platforms (iOS/Android/macOS/Windows) with its runtime. This increases its practical value.&lt;/p&gt;&lt;p&gt;And if you can handle sarcasm, there are even &lt;a href="https://fsharpforfunandprofit.com/posts/ten-reasons-not-to-use-a-functional-programming-language/"&gt;more reasons!&lt;/a&gt;&lt;/p&gt;&lt;h3 id="implementing-drag-and-drop-in-f"&gt;Implementing drag-and-drop in F#&lt;/h3&gt;&lt;p&gt;When searching for &lt;strong&gt;multi-file drag-and-drop&lt;/strong&gt; examples, &lt;a href="https://stackoverflow.com/questions/44537356/swift-4-nsfilenamespboardtype-not-available-what-to-use-instead-for-registerfo/51344295#51344295"&gt;you may come across the &lt;strong&gt;deprecated global variable&lt;/strong&gt; &lt;code&gt;NSFilenamesPboardType&lt;/code&gt;&lt;/a&gt;. The equivalent Xamarin symbol is &lt;code&gt;NSPasteboard.NSFilenamesType&lt;/code&gt;. Since the former symbol does not exist in Swift 4, some have suggested a workaround of hardcoding the string as “NSFilenamesPboardType” or using the alternate string &lt;code&gt;kUTTypeFileURL&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In conclusion, using one of these strings&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;code&gt;NSFilenamesPboardType&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;"NSFilenamesPboardType"&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;NSPasteboard.NSFilenamesType&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;kUTTypeFileURL&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;in &lt;code&gt;registerForDraggedTypes(_ newTypes: [NSPasteboard.PasteboardType])&lt;/code&gt; should allow an &lt;code&gt;NSDraggingDestination&lt;/code&gt; receiver, such as an &lt;code&gt;NSView&lt;/code&gt; or &lt;code&gt;NSCollectionView&lt;/code&gt;, access to multiple dragged files.&lt;/p&gt;&lt;p&gt;However, the global variable &lt;code&gt;NSFilenamesPboardType&lt;/code&gt; is &lt;a href="https://developer.apple.com/documentation/appkit/nsfilenamespboardtype"&gt;deprecated according to Apple&lt;/a&gt; thereby suggesting that an alternative should be sought.&lt;/p&gt;&lt;p&gt;The symbol appears to have been introduced in 10.10, deprecated since 10.13 and will be removed after 10.14. The immediate &lt;a href="https://developer.apple.com/documentation/appkit/nsfilenamespboardtype"&gt;documentation on the variable&lt;/a&gt; wasn’t a help in knowing what to use in place of it.&lt;/p&gt;&lt;p&gt;However, a &lt;a href="http://codeworkshop.net/objc-diff/sdkdiffs/macos/10.14/AppKit.html"&gt;diff of &lt;code&gt;NSPasteboard.h&lt;/code&gt;&lt;/a&gt; kindly provided by Matt Stevens has a suggestion that leads to a solution.&lt;/p&gt;&lt;table class="documentTable"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th style="text-align: center"&gt; &lt;/th&gt; &lt;th style="text-align: center"&gt;Availability&lt;/th&gt; &lt;th&gt;Deprecation Message&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style="text-align: center"&gt;From&lt;/td&gt; &lt;td style="text-align: center"&gt;Available&lt;/td&gt; &lt;td&gt;&lt;em&gt;none&lt;/em&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style="text-align: center"&gt;To&lt;/td&gt; &lt;td style="text-align: center"&gt;Deprecated&lt;/td&gt; &lt;td&gt;Create multiple pasteboard items with NSPasteboardTypeFileURL or kUTTypeFileURL instead&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;p&gt;For convenience, it would be nice to get the file URLs into an array. That requires handing the URL type to &lt;code&gt;readObjects(forClasses:options:)&lt;/code&gt;. The code is shown here as parting of &lt;code&gt;draggingEnded&lt;/code&gt; on the &lt;code&gt;NSDraggingDestination&lt;/code&gt; implemented in &lt;code&gt;DNDView.fs&lt;/code&gt;.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-fsharp" data-lang="fsharp"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// DNDView.fs&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DraggingEnded&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NSDictionary&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typeof&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NSUrl&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;types&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|]&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;objs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DraggingPasteboard&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadObjectsForClasses&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;objs&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filecnt&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filecnt&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updatefn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filecnt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;:?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;NSUrl&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt; &lt;span class="c1"&gt;// log the paths&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;hr /&gt;&lt;h3 id="overriding-an-init-in-the-macos-sdk"&gt;Overriding an init in the macOS SDK&lt;/h3&gt;&lt;p&gt;In getting started with the surrounding app that supports the drag-and-drop operations, the trickiest part was getting the constructor to override &lt;code&gt;init(coder:)&lt;/code&gt;, the init called when bringing up a view from the storyboard.&lt;/p&gt;&lt;p&gt;F# has &lt;a href="http://www.codingwithsam.com/2017/09/25/fsharp-classes-23-view-models/"&gt;many different constructor forms&lt;/a&gt; and I was not able to achieve the override by having a primary constructor even when setting a matching argument. The following code, for example, was not successful.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-fsharp" data-lang="fsharp"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// DNDView.fs&lt;/span&gt;&lt;span class="c1"&gt;// This primary constructor did not work to override init(coder:).&lt;/span&gt; &lt;span class="o"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DNDView&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;]&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;DNDView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NSCoder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="n"&gt;NSView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Instead, the problem can be solved with an &lt;strong&gt;explicit constructor&lt;/strong&gt; form. This differs from having a single, primary constructor by not setting any arguments in the initial constructor. This allows multiple init overrides even though I only needed to override one.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-fsharp" data-lang="fsharp"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// DNDView.fs&lt;/span&gt;&lt;span class="c1"&gt;// The primary constructor is generic here.&lt;/span&gt; &lt;span class="o"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DNDView&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;]&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;SNKView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="n"&gt;NSView&lt;/span&gt;&lt;span class="c1"&gt;// Explicit constructors can override the needed macOS SDK inits.&lt;/span&gt; &lt;span class="o"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Export&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;initWithCoder:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;]&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NSCoder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="n"&gt;NSView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;The export attribute inside the square and angled brackets, [&amp;lt; &amp;gt;], tells the compiler what init to override. Note that it uses the Objective-C form of writing method signatures where the word “with” is included.&lt;/p&gt;&lt;p&gt;Many Xamarin usages in F# involve translating from C# and that entails constraints that limit how something can be written. The full range of the F# language may not be available when it comes to translating code directly. For this case of constructor overriding, I don’t believe there is an another way to write this.&lt;/p&gt;&lt;h4 id="making-the-user-interface"&gt;Making the user interface&lt;/h4&gt;&lt;p&gt;In contrast to the previous explicit constructor form, a view controller for the UI can be made using the primary form where it takes a single argument. It has a few text fields where one of them is updated with a count of the number of files that have been dropped into the app. These are now, with the explicit constructor form, defined as mutable &lt;code&gt;let&lt;/code&gt; bindings and then added as subviews in a, hopefully, familiar &lt;code&gt;viewDidLoad&lt;/code&gt; override.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-fsharp" data-lang="fsharp"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// ViewController.fs&lt;/span&gt;&lt;span class="o"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ViewController&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;]&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;ViewController&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="n"&gt;NSViewController&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DefaultValue&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="k"&gt;mutable&lt;/span&gt; &lt;span class="n"&gt;tbHeight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;mutable&lt;/span&gt; &lt;span class="n"&gt;descText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NSTextField&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CGRect&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;StringValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;File Count&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Editable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bezeled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DrawsBackground&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Selectable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;mutable&lt;/span&gt; &lt;span class="n"&gt;cntText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NSTextField&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CGRect&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;StringValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Editable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bezeled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DrawsBackground&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Selectable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Outlet&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;]&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CountField&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cntText&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cntText&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ViewDidLoad&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ViewDidLoad&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="o"&gt;:?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SNKView&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddSubview&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;descText&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddSubview&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cntText&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CountField&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringValue&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileCount&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UpdateView&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CountField&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringValue&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h3 id="passing-data-between-components"&gt;Passing data between components&lt;/h3&gt;&lt;p&gt;The text field &lt;code&gt;cntText&lt;/code&gt; has an outlet that defines a getter and setter to be able to update the field with the count of files.&lt;/p&gt;&lt;p&gt;The goal here is to have a loosely coupled architecture, allowing data to be passed between components while minimizing dependencies. In general, for MVC, views should not depend on the controllers using them.&lt;/p&gt;&lt;p&gt;Delegation is a solution to this problem and is used throughout the iOS/macOS SDKs. It promotes composition over inheritance as a way of extending classes. Since F# is a functional language, &lt;em&gt;first class functions can be used to implement delegation&lt;/em&gt; without the additional overhead of delegate protocols.&lt;/p&gt;&lt;p&gt;The key idea of delegation is that the receiver can reference the &lt;code&gt;self&lt;/code&gt; of the sender. I’ve left out that reference as I did not have a need for the full delegation pattern. For reference, there are &lt;a href="http://rosettacode.org/wiki/Delegates#F_Sharp"&gt;nice comparative examples of delegation at Rosetta Code.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For my solution, it is the following line inside the view controller that passes in an anonymous function to update the text field containing the count of files.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-fsharp" data-lang="fsharp"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// ViewController.fs&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UpdateView&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CountField&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringValue&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;This reads as the view’s update member, &lt;code&gt;UpdateView&lt;/code&gt;, gets a lambda function with an argument &lt;code&gt;cnt&lt;/code&gt; that sets the string value of the label showing the count. That’s astounding clarity for complex functionality that might take more code to express in other environments.&lt;/p&gt;&lt;p&gt;That’s it! The DND view stays independent from the view controller and can be used anywhere while being able to update whoever decides to adopt it.&lt;/p&gt;&lt;h3 id="let-bindings-vs-vals"&gt;Let bindings vs vals&lt;/h3&gt;&lt;p&gt;One F# language constraint is that the constructor form determines if &lt;code&gt;let&lt;/code&gt; bindings are available in a class. When using explicit constructors, &lt;code&gt;val&lt;/code&gt; is used instead of &lt;code&gt;let&lt;/code&gt; to configure private backing variables or &lt;strong&gt;uninitialized fields&lt;/strong&gt; for its members. These members can then be accessed externally.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-fsharp" data-lang="fsharp"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// DNDView.fs&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="k"&gt;mutable&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;filecnt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="k"&gt;mutable&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;updatefn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;These &lt;code&gt;val&lt;/code&gt;s serve as the backing stores for the members (properties) defined in the following code.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-fsharp" data-lang="fsharp"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// DNDView.fs&lt;/span&gt;&lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FileCount&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filecnt&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filecnt&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UpdateView&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updatefn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;The mutable &lt;code&gt;val&lt;/code&gt;s can be function types indicated by a compact signature of the form: &lt;code&gt;type -&amp;gt; type&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;All together, the &lt;code&gt;DNDView&lt;/code&gt; looks like the following code, showing the property definitions along with method overrides where the dragged types are handled. The snippet leaves out the &lt;code&gt;draggingEnded&lt;/code&gt; method previously listed.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-fsharp" data-lang="fsharp"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// DNDView.fs&lt;/span&gt;&lt;span class="o"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DNDView&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;]&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;DNDView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="n"&gt;NSView&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="k"&gt;mutable&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;filecnt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="k"&gt;mutable&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;updatefn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt;&lt;span class="o"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Export&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;initWithCoder:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;]&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NSCoder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="n"&gt;NSView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;filecnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;updatefn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FileCount&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filecnt&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filecnt&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UpdateView&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updatefn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AwakeFromNib&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AwakeFromNib&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nn"&gt;NSPasteboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NSPasteboardTypeFileUrl&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterForDraggedTypes&lt;/span&gt; &lt;span class="o"&gt;[|&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="o"&gt;|]&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DraggingEntered&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;NSDragOperation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h3 id="handling-a-programmatic-ui"&gt;Handling a programmatic UI&lt;/h3&gt;&lt;p&gt;For this example, I chose to generate a UI programmatically. I know it is possible to use the storyboard but I still have yet to determine the optimal method for using one with F#.&lt;/p&gt;&lt;p&gt;The goal was to have a minimal, but functional, layout. The controls were recalculated based on the window size. NSViews in general have their origin at the lower left, this is different from iOS where it is the upper left corner. Performing the layout in &lt;code&gt;viewDidLayout&lt;/code&gt; of the view controller allowed for maintaining the layout during such changes as window resizing. The additional code added to the view controller for this is shown below.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-fsharp" data-lang="fsharp"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// ViewController.fs&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ViewDidLayout&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ViewDidLayout&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="n"&gt;layoutViews&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cntText&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;descText&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;layoutViews&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ViewController&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cntText&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NSTextField&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;descText&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NSTextField&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;view_h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;margin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;descText&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view_h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tbHeight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;descText&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;descText&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;cntText&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view_h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tbHeight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;margin&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;descText&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cntText&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cntText&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;I really like the sub-indenting with offside formatting for mathematically arranging expressions with a binary operator, as seen above.&lt;/p&gt;&lt;h4 id="refining-the-dynamic-layout"&gt;Refining the dynamic layout&lt;/h4&gt;&lt;p&gt;A window controller subclass was used solely for the purpose of being able to obtain the precise height value of the windows title bar by getting &lt;code&gt;contentRect(forBounds:)&lt;/code&gt; and subtracting the content view frame height. The values are in units of abstract points, not pixels. The title bar height is saved into the VC.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-fsharp" data-lang="fsharp"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// WindowController.fs&lt;/span&gt;&lt;span class="o"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WindowController&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;]&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;WindowController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="n"&gt;NSWindowController&lt;/span&gt;&lt;span class="o"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Export&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;initWithCoder:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;]&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NSCoder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="n"&gt;NSWindowController&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WindowDidLoad&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WindowDidLoad&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;vc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentViewController&lt;/span&gt; &lt;span class="o"&gt;:?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ViewController&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;crh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentRectFor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tbHeight&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;crh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;&lt;p&gt;This example demonstrated how to create a Mac app that handles multiple files dragged in from the Finder, using a non-deprecated approach, while using the F# language. It consisted of three classes: &lt;code&gt;ViewController&lt;/code&gt;, &lt;code&gt;WindowController&lt;/code&gt;, and &lt;code&gt;DNDView&lt;/code&gt; were the latter conformed to &lt;code&gt;NSDraggingDestination&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Working in F# for macOS requires integrated knowledge that spans multiple languages. I recommend exploring it to learn functional programming principles that can lead to practical applications. It has an elegance that can benefit everything else you do. Stepping outside of the beautiful, walled garden of iOS/macOS can be scary at first, but the perspective gained will give you wings to fly over many technical challenges.&lt;/p&gt;&lt;p&gt;F# reduces syntax with a mathematical kind of offside-rule formatting. It is indentation based where whitespace is significant like Python but function oriented like Scala. There are no braces for code blocks and no return statements for functions. After awhile the extra syntax required in other languages may seem strange when you have to use it again.&lt;/p&gt;&lt;p&gt;It’s practically required to also know C#, the home language of most Xamarin examples and the assembly browser in Visual Studio for Mac. Being two to three levels removed from native iOS/macOS gives a unique perspective that can deepen understanding of diverse software principles.&lt;/p&gt;&lt;p&gt;Just like with statically typed Swift, the compiler can light your way. Following its hints and errors allowed me to know enough about what is allowed to develop the project in a way that was more like solving an algebraic puzzle by satisfying one constraint at a time rather than writing out the verbose steps of an imperative recipe.&lt;/p&gt;&lt;p&gt;Finally, this example was only meant as an introduction and there are many possible paths to be explored.&lt;/p&gt;</description><link>http://www.ikiApps.com/macos/2018/08/20/drag-and-drop-mac-fsharp</link> <guid>http://www.ikiApps.com/macos/2018/08/20/drag-and-drop-mac-fsharp</guid> <pubDate>2018-08-20T00:00:00+00:00</pubDate> </item><item><title>Manage Python for Machine Learning on macOS</title> <description>&lt;p&gt;It behooves me to address machine learning as a separate field from software engineering due to it having a different focus while rapidly expanding in importance. I’m not just jumping on the bandwagon either as I started with ML projects and coursework around 10 years ago.&lt;/p&gt;&lt;p&gt;For exploration and learning, Python is probably one of the best environments to work in due to it having some of the most important ML libraries available for it and also being highly popular in the ML community.&lt;/p&gt;&lt;p&gt;That being said, working with Python on macOS takes a little extra setup if you want to have a clean and manageable environment. The key idea is to avoid messing with the system Python that comes with macOS. That one should be left untouched for use by the OS because it can be changed during OS upgrades.&lt;/p&gt;&lt;p&gt;Instead, I recommend &lt;code&gt;pyenv&lt;/code&gt; and &lt;code&gt;pyenv-virtualenv&lt;/code&gt; for creating separate Python environments that can be reserved for machine learning and other purposes.&lt;/p&gt;&lt;p&gt;The reason to do this is because once you setup your ML libraries, you don’t want them or their dependencies to change if you need to use Python for something else. Also, it allows you to have separate versions of Python for separate purposes. Python 2.7.x is still needed for tasks like building &lt;a href="https://www.chromium.org"&gt;Chromium&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I’ve recommended &lt;code&gt;pyenv-virtualenv&lt;/code&gt; in addition to &lt;code&gt;pyenv&lt;/code&gt; because it &lt;em&gt;allows the creation of separate environments under the same version of Python&lt;/em&gt; whereas &lt;code&gt;pyenv&lt;/code&gt; by itself is used for installing different versions of Python.&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;Please see the latest installation docs, links below, for each tool at their respective Github pages.&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;&lt;code&gt;pyenv&lt;/code&gt;&lt;/a&gt; &lt;a href="https://github.com/pyenv/pyenv"&gt;(https://github.com/pyenv/pyenv)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;&lt;code&gt;pyenv-virtualenv&lt;/code&gt;&lt;/a&gt; &lt;a href="https://github.com/pyenv/pyenv-virtualenv"&gt;(https://github.com/pyenv/pyenv-virtualenv)&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;On macOS, you will want to have Python installed as a framework to use features like integrated plotting with matplotlib. This can be done by setting an environment variable during the installation of your desired version.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install 3.6.5 &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is only needed for the base version and is unnecessary for subsequent virtual environments installed by a command like&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ pyenv virtualenv 3.6.5 python-3-for-ml &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, switching into a virtual environment can be done with &lt;code&gt;pyenv&lt;/code&gt; alone. For example&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ pyenv shell python-3-for-ml &lt;/code&gt;&lt;/pre&gt;&lt;hr /&gt;&lt;p&gt;You can always see what is installed using the &lt;code&gt;versions&lt;/code&gt; argument. On my system, I have something like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ pyenv versions system 2.7.15 3.6.5 3.6.5/envs/python-3-for-ml 3.7.1 * miniconda3-latest (set by PYENV_VERSION environment variable) python-3-for-ml &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When using &lt;code&gt;pip&lt;/code&gt; for package management, installed packages can be listed with &lt;code&gt;pip list&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ pip list Package Version ------------------ -------- appnope 0.1.0 asn1crypto 0.24.0 attrs 19.1.0 backcall 0.1.0 bleach 3.1.0 botocore 1.12.86 certifi 2019.3.9 cffi 1.11.5 chardet 3.0.4 colorama 0.3.9 conda 4.6.14 cryptography 2.6.1 cycler 0.10.0 dbgp 1.0 decorator 4.4.0 defusedxml 0.6.0 docutils 0.14 entrypoints 0.3 idna 2.7 ipykernel 5.1.0 ipython 7.5.0 ipython-genutils 0.2.0 ipywidgets 7.4.2 jedi 0.13.3 Jinja2 2.10.1 jmespath 0.9.3 jsonschema 3.0.1 jupyter 1.0.0 jupyter-client 5.2.4 jupyter-console 6.0.0 jupyter-core 4.4.0 kiwisolver 1.0.1 MarkupSafe 1.1.1 matplotlib 3.0.2 mistune 0.8.4 nbconvert 5.5.0 nbformat 4.4.0 notebook 5.7.8 numpy 1.15.4 pandas 0.23.4 pandocfilters 1.4.2 parso 0.4.0 pexpect 4.7.0 pickleshare 0.7.5 pip 19.1.1 prometheus-client 0.6.0 prompt-toolkit 2.0.9 ptyprocess 0.6.0 pyasn1 0.4.5 pycosat 0.6.3 pycparser 2.18 Pygments 2.4.0 pyOpenSSL 18.0.0 pyparsing 2.3.0 pyrsistent 0.14.11 PySocks 1.6.8 python-dateutil 2.8.0 pytz 2018.7 PyYAML 3.13 pyzmq 18.0.0 qtconsole 4.4.4 requests 2.19.1 rsa 3.4.2 ruamel-yaml 0.15.46 s3transfer 0.1.13 scikit-learn 0.20.0 scipy 1.1.0 Send2Trash 1.5.0 setuptools 40.2.0 six 1.11.0 sklearn 0.0 terminado 0.8.2 testpath 0.4.2 tornado 6.0.2 tqdm 4.28.1 traitlets 4.3.2 urllib3 1.23 virtualenv 16.1.0 wcwidth 0.1.7 webencodings 0.5.1 wheel 0.31.1 widgetsnbextension 3.4.2 &lt;/code&gt;&lt;/pre&gt; </description><link>http://www.ikiApps.com/machine-learning/2018/06/24/python-for-ml</link> <guid>http://www.ikiApps.com/machine-learning/2018/06/24/python-for-ml</guid> <pubDate>2018-06-24T00:00:00+00:00</pubDate> </item><item><title>Chaining Reactive Operations versus Promise Chains</title> <description>&lt;p&gt; &lt;figure class="image"&gt;&lt;img src="/img/2017-05-15-promises-are-a-bridge-to-reactive/bridge-over-water.png" alt="Figure 1: A bridge is something that helps you get from one place of understanding to another." /&gt; &lt;figcaption&gt;&lt;strong&gt;Figure 1: A bridge is something that helps you get from one place of understanding to another.&lt;/strong&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;/p&gt;&lt;p&gt;In my journey, I crossed the bridge of promises/futures and started construction of a new castle in the enchanted land of reactive extensions. Previous attempts to make the transition from the imperative world were not as successful before that bridge was established. Instead, the traversing of rough waters was required any time I wanted to visit the other side. It was that bridge that allowed the easy back and forth passage between imperative and reactive in the kingdom of Swift (v3.1).&lt;/p&gt;&lt;p&gt;To those familiar with the mind bending struggle in going from ingrained imperative thought processes to the more declarative, reactive side of programming, I can only suggest that &lt;strong&gt;promises/futures may be the intermediate stepping stone that will get you across.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Promises provide a subset of the functionality found in programming with reactive extensions (Rx). In many cases, they are all you need to control multiple asynchronous operations. For the case of creating serverless functions for something like AWS Lambda, they can be the perfect tool in Node.js.&lt;/p&gt;&lt;h2 id="a-common-problem-get-prerequisite-data-for-an-asynchronous-operation"&gt;A common problem: Get prerequisite data for an asynchronous operation&lt;/h2&gt;&lt;p&gt;The problem is how to obtain user data, without using fixed storage like a property, prior to performing an operation with the data?&lt;/p&gt;&lt;p&gt;The pattern using promises is to chain an operation obtaining the needed data to a second operation that uses the data. Order is guaranteed by virtue of the serialization that is inherent to promises. This pattern can be equally implemented using Rx. By showing how this is done, my aim is to bridge your understanding of promises into Rx.&lt;/p&gt;&lt;p&gt;The Promise library I’m using is &lt;a href="https://github.com/mxcl/PromiseKit"&gt;PromiseKit&lt;/a&gt; and the Rx library is &lt;a href="https://github.com/ReactiveX/RxSwift"&gt;RxSwift&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;I have a new version of Calendar Timer 2 under development and I’m going to use actual code from my project.&lt;/strong&gt; Since I’m using a database on Firebase, the code is also going to be tailored to that platform. The general differences between promises and reactive extensions, however, apply to many platforms and languages.&lt;/p&gt;&lt;h2 id="the-promise-chaining-solution"&gt;The Promise chaining solution&lt;/h2&gt;&lt;p&gt;In the following code, I have generated the solution using a promise chain. I create a new Promise to hold the result of a unique ID that corresponds to a user-generated timed session configuration or &lt;code&gt;SessionConfigID&lt;/code&gt;. I first need to get the user’s ID before I can save the data for the user. This is obtained from another Promise (line 10).&lt;/p&gt;&lt;p&gt;Once I have the prerequisite data, I call &lt;code&gt;setValue&lt;/code&gt; (line 20) on a Firebase database reference to save the model object for the session configuration. The errors are handled by failing the promise. Upon success, the unique key that is generated using Firebase is returned by the Promise (line 23).&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="c1"&gt;/// Save the session to the database for the current user.&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SessionConfigID&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FirebasePath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rawValue&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;configs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FirebasePath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sessionConfigs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rawValue&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;prefix&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FirebasePrefix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sessionConfigs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rawValue&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Promise&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fail&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="n"&gt;firstly&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UserID&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FirebaseUserStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCurrentUserID&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UserID&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwUID&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FirebaseError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userIDMissingError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="lineno"&gt;15 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;16 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbRefWithKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uwUID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;configs&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="lineno"&gt;17 &lt;/span&gt; &lt;span class="kr"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;18 &lt;/span&gt; &lt;span class="n"&gt;dref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toFirebase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="lineno"&gt;19 &lt;/span&gt; &lt;span class="n"&gt;withCompletionBlock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;20 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;!)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;21 &lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;22 &lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="lineno"&gt;23 &lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;24 &lt;/span&gt; &lt;span class="c1"&gt;// The error handling here feels awkward and redundant&lt;/span&gt; &lt;span class="lineno"&gt;25 &lt;/span&gt; &lt;span class="c1"&gt;// but it is required by the promise pattern.&lt;/span&gt; &lt;span class="lineno"&gt;26 &lt;/span&gt; &lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;27 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;28 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;29 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;With promises, there is really only one way to combine operations and that is in a serial chain. On the other hand, reactive extensions offer a much greater set of options. However, for the purpose of comparison I’m going to limit my example to performing the equivalent operations of a promise chain.&lt;/p&gt;&lt;h2 id="the-observable-chaining-solution"&gt;The Observable chaining solution&lt;/h2&gt;&lt;p&gt;I create a function that returns an Observable of a user’s sessionconfiguration ID that identifies a custom model object used to storeuser data. I first need the user’s ID to be able to save a user created session configuration. In my code, this is handled by an Observable assigned to &lt;code&gt;uidObs&lt;/code&gt;. With reactive extensions, &lt;strong&gt;&lt;code&gt;flatMap&lt;/code&gt; is the chaining tool that allows you to chain the results of one observableinto another.&lt;/strong&gt; See &lt;strong&gt;Figure 2&lt;/strong&gt; for a diagram to help you visualize what happens with observables during a flatMap. Once I have the user ID, I pass it into the Observable that returns the &lt;code&gt;SessionConfigID&lt;/code&gt; (line22).&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="c1"&gt;/// Save the session to the database for the current user.&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SessionConfigID&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FirebasePath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rawValue&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;configs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FirebasePath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sessionConfigs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rawValue&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;prefix&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FirebasePrefix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sessionConfigs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rawValue&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uidObs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FirebaseUserStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentUserID&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;uidObs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SessionConfigID&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwUID&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FirebaseError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userIDMissingError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Disposables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;15 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbRefWithKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uwUID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;configs&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="lineno"&gt;16 &lt;/span&gt; &lt;span class="kr"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;17 &lt;/span&gt; &lt;span class="n"&gt;dref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toFirebase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="lineno"&gt;18 &lt;/span&gt; &lt;span class="n"&gt;withCompletionBlock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;19 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;!)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;20 &lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;21 &lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="lineno"&gt;22 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Disposables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt;23 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;24 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;25 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;It can be seen that promise chaining and observable chaining are similar. It’s the small details of how to arrange the code that takes time to be comfortable. With the reactive code, there were many other ways to accomplish the same result but I took special care to express an example that shows how similar they can be.&lt;/p&gt;&lt;p&gt; &lt;figure class="image"&gt;&lt;img src="/img/2017-05-15-promises-are-a-bridge-to-reactive/flatmap-modified-marble-diagram.png" alt="Figure 2: Modified marble diagram for flatMap.A source observable is mapped and each transformed element ends up in an observable of observables. These are flattened into a single new observable containing the merged, transformed elements." /&gt; &lt;figcaption&gt;&lt;strong&gt;Figure 2: Modified marble diagram for flatMap.&lt;/strong&gt; A source observable is mapped and each transformed element ends up in an observable of observables. These are flattened into a single new observable containing the merged, transformed elements.&lt;/figcaption&gt; &lt;/figure&gt; &lt;/p&gt;&lt;h2 id="conclusion-observables-can-chain-just-as-well-as-promises"&gt;Conclusion: Observables can chain just as well as Promises&lt;/h2&gt;&lt;p&gt;In summary, operation chaining can be accomplished with both promises or observables.&lt;/p&gt;&lt;ul&gt; &lt;li&gt;If you choose to use promises, you have to make things you want to chain into promises.&lt;/li&gt; &lt;li&gt;If you choose to use observables, you have to make things you want to chain into observables.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Since both are just wrappers around operations in your native language, you can wrap one with the other if needed. I’ve found the occasion to wrap an Observable with a Promise while migrating a project from promises to Rx.&lt;/p&gt;&lt;p&gt;The templates for each are illustrated below.&lt;/p&gt;&lt;h3 id="promise-chaining-template"&gt;Promise chaining template&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;firstly { () -&amp;gt; Promise&amp;lt;T&amp;gt; in return somePromiseOfTypeT() }.then { (result: T) -&amp;gt; Promise&amp;lt;U&amp;gt; in return somePromiseOfTypeU(use: result) }.then { (result: U) -&amp;gt; () in // Do something with the result of type U. }.catch { err in // Handle the error. } &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Alternatively, if you are willing to accept some rightward creep, the &lt;code&gt;firstly&lt;/code&gt; keyword can be dropped.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;return somePromiseOfTypeT().then { (result: T) -&amp;gt; Promise&amp;lt;U&amp;gt; in return somePromiseOfTypeU()   }.then { (result: U) -&amp;gt; () in // Do something with the result of type U. }.catch { err in // Handle the error. } &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;How to handle errors within a promise chain can be problematic. Any error is meant to interrupt execution of the series. The reactive toolset is much more versatile for error handling by being able to handle them where needed. Rx does not force you into a fixed pattern of error handling like the way promises do.&lt;/p&gt;&lt;h3 id="observable-chaining-template"&gt;Observable chaining template&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;someObservableOfTypeT().flatMap { (result: T) -&amp;gt; Observable&amp;lt;U&amp;gt; in return someObservableOfTypeU(use: result) }.subscribe(onNext: { (result: U) in // Do something with the result of type U. }, onError: { err in // Handle the error }).addDisposableTo(bag) &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Moving the flatMap operator to the next line with a continuation indent allows maintaining leftward alignment of your operators while emphasizing the source observable. This is a style I prefer with Rx.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;someObservableOfTypeT() .flatMap { (result: T) -&amp;gt; Observable&amp;lt;U&amp;gt; in return someObservableOfTypeU(use: result) } .subscribe(onNext: { (result: U) in // Do something with the result of type U. }, onError: { err in // Handle the error }).addDisposableTo(bag) &lt;/code&gt;&lt;/pre&gt;&lt;h3 id="final-words-on-chaining"&gt;Final words on chaining&lt;/h3&gt;&lt;p&gt;Just like with promise chains where the &lt;code&gt;then&lt;/code&gt;s can continue on and on, &lt;code&gt;flatMap&lt;/code&gt;s can also be added for any number of returned observables. With Rx, however, the difference is this chaining is a situational occurrence. The reactive toolbox has many other options. Note that I have shown you observable chaining in two different contexts, during creation of an observable and during subscription. If you have enjoyed how promises simplify chained asynchronous operations, you will love the extra control that Rx offers for the same underlying operations.&lt;/p&gt;&lt;p&gt;Being on the other side, I find it’s more difficult to get promises to fit every problem as they are less malleable resulting in less options than the reactive tool set. They do fit some problems well, like serverless functions on AWS Lambda in Node.js, but outside of those cases you will battle to get them to do more than linear chaining. While a chain can be the perfect choice, it is unsuitable for the range of complex needs found in more advanced apps. For that, my friends, there is an observable that can be crafted for anything.&lt;/p&gt;</description><link>http://www.ikiApps.com/reactive-programming/2017/05/15/promises-are-a-bridge-to-reactive</link> <guid>http://www.ikiApps.com/reactive-programming/2017/05/15/promises-are-a-bridge-to-reactive</guid> <pubDate>2017-05-15T00:00:00+00:00</pubDate> </item><item><title>A Swift Script for Detecting Silence in Audio Files</title> <description>&lt;p&gt; &lt;figure class="image"&gt;&lt;img src="/img/2017-03-15-swift-script-for-detecting-silence-in-audio-files/sample-waveform-w-silence.png" alt="Figure 1: A stereo waveform with unexpected silence." /&gt; &lt;figcaption&gt;&lt;strong&gt;Figure 1: A stereo waveform with unexpected silence.&lt;/strong&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;/p&gt;&lt;p&gt;Detecting silence in audio files is an essential capability to ensure correct audio processing. When handling large numbers of files, this can be a cumbersome and time-consuming task to perform manually. I’ve written a script in Swift to automate this job. It uses &lt;code&gt;ffmpeg&lt;/code&gt; as a subprocess along with its &lt;code&gt;silencedetect&lt;/code&gt; filter. I’ve written the script using Reactive Programming in Swift 3 and RxSwift. It’s capable of relatively fast, recursive scanning of huge numbers of files given a single starting point while reliably reporting all of its results to the console.&lt;/p&gt;&lt;p&gt;This project is somewhat experimental since Mac command line tools do not yet have full support for linking external frameworks. The libraries for Swift still cannot be statically linked. Anything else containing Swift code cannot be built as a static framework. If a framework containing Swift code is linked, an external source of the Swift libraries must be provided. Thus, there is a high barrier to writing Swift scripts with RxSwift, but it is one that can be overcome.&lt;/p&gt;&lt;p&gt;The choice to use reactive programming for this script was made due to the streaming nature of processing files and handling of audio data as streams. I had this dream where everything is a stream 😊. I will cover more aspects of reactive programming in a future tutorial.&lt;/p&gt;&lt;h2 id="silence"&gt;Silence&lt;/h2&gt;&lt;p&gt;The following silence cases are supported:&lt;/p&gt;&lt;ol&gt; &lt;li&gt;Silence occurring at the beginning of audio.&lt;/li&gt; &lt;li&gt;Silence occurring in the middle of audio.&lt;/li&gt; &lt;li&gt;Silence occurring at the end of audio.&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;Complete silence should be detected as case (1). Another option for this is the &lt;code&gt;volumedetect&lt;/code&gt; filter.&lt;/p&gt;&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;&lt;p&gt;Usage for the script is:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ detectSilence ${ANY_VALID_BASE_PATH} 2&amp;gt;/dev/null &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is a sample of the output:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Silence found in file:///Audio-Files/2017-Mar-15/01.flac 🚩 start -0.0410202, end 0.417959, duration 0.45898  total duration: 939.97 Silence found in file:///Audio-Files/2017-Mar-19/01.flac 🚩 start 2081.81, end 2088.02, duration 6.20592 total duration: 3005.23 Silence found in file:///Audio-Files/2017-Mar-17/02.flac 🚩 start 301.103, end 🔳, duration 🔳 total duration: 729.11 ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The red flags indicate silences that have exceeded a given duration. The &lt;code&gt;silencedetect&lt;/code&gt; filter can detect silences with no end or no duration. These usually correspond to silences at the end of a file. This type of silence is also graphically represented to show its relative length with respect to the total duration. The level at which audio is considered silence is set by a noise floor variable in units of dB in the script.&lt;/p&gt;&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;&lt;h3 id="dependencies"&gt;Dependencies&lt;/h3&gt;&lt;p&gt;The additional dependencies for this script beyond Xcode 8 are:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/ReactiveX/RxSwift"&gt;RxSwift&lt;/a&gt; (installed by &lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;&lt;a href="https://trac.ffmpeg.org/wiki/CompilationGuide/MacOSX"&gt;ffmpeg&lt;/a&gt; with the &lt;code&gt;silencedetect&lt;/code&gt; filter&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Installation of RxSwift is accomplished with:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ carthage update &lt;/code&gt;&lt;/pre&gt;&lt;h3 id="make-the-binary"&gt;Make the binary&lt;/h3&gt;&lt;p&gt;Build the project with Xcode. Show the Products folder in the Finder from Xcode. Copy the contents of the Products folder to a location of your choice. The &lt;code&gt;detectSilence&lt;/code&gt; binary is needed along with the RxSwift.framework directory and its contents. The detectSilence.swiftmodule directory is not needed because the Swift libraries are accessed from the toolchain (the command-line tools) of Xcode. This is the external source mentioned in the introduction.&lt;/p&gt;&lt;p&gt;That concludes the installation process. Once installed, the compiled script can be accessed as a normal command.&lt;/p&gt;&lt;h3 id="alternative-option-1-add-a-copy-files-phase"&gt;Alternative option 1: Add a Copy Files phase&lt;/h3&gt;&lt;p&gt;Under build phases for the &lt;code&gt;detectSilence&lt;/code&gt; target, add a Copy Files phase to copy the freshly built binary to an Absolute Path of your choice. Leave ‘Copy only when installing’ unchecked. With this phase added, every time the project is built, the binary will be updated in the destination location such as in &lt;code&gt;~/bin&lt;/code&gt;.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;RxSwift for scripting is a probably an uncommon idea but, then again, Swift for scripting is still catching on, too. This project is a demonstration of the possibilities of both while providing a practical tool that can be enjoyed now.&lt;/p&gt;&lt;hr /&gt;&lt;h2 id="release-notes"&gt;Release Notes&lt;/h2&gt;&lt;ul&gt; &lt;li&gt;v1.0.0 First release verified with Xcode 8.3, Swift 3.1 and RxSwift 3.3.1.&lt;/li&gt; &lt;li&gt;v1.0.1 Made sure that the presence of variable width encoded characters do not affect text matches.&lt;/li&gt; &lt;li&gt;v1.0.2 Handled negative numbers. Fixed output to show only when duration is available.&lt;/li&gt; &lt;li&gt;v1.0.3 Added reporting of detectsilence starts that have no end. Added retrieval of total duration. These changes handle the case where silence starts in the middle of a file and continues until the end.&lt;/li&gt; &lt;li&gt;v1.0.4 Added a graphic rendering of silences that extend all the way to the end of a file.&lt;/li&gt; &lt;li&gt;v1.0.5 Prevented sending a result with no values.&lt;/li&gt; &lt;li&gt;v1.0.6 Reduced some extraneous code.&lt;/li&gt; &lt;li&gt;v1.0.7 Further optimized Observable handling.&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="repositories"&gt;Repositories&lt;/h2&gt;&lt;p&gt;The script has an open-source MIT license and repository links are here:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/ikiapps/detectSilence"&gt;Github&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://bitbucket.org/ikiapps/detectsilence"&gt;Bitbucket&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </description><link>http://www.ikiApps.com/open-source/2017/03/15/swift-script-for-detecting-silence-in-audio-files</link> <guid>http://www.ikiApps.com/open-source/2017/03/15/swift-script-for-detecting-silence-in-audio-files</guid> <pubDate>2017-03-15T00:00:00+00:00</pubDate> </item><item><title>Make Model Objects from Firebase JSON Data in Swift</title> <description>&lt;p&gt;Your app’s data model defines the value that you are going to deliver to the world through your creation. The kinds of information we can consume or create with your app are enabled by this fundamental software component. It tells us whether your app can serve a gourmet palate or if it is only there to be a snack.&lt;/p&gt;&lt;p&gt;While being one of your app’s most important parts, it can be boring to implement. The code typically only involves transforming data from one type to another in a repetitive manner and this can end up being tedious to implement. However, I want to show you that making model objects can still be interesting and exciting and not just a routine task.&lt;/p&gt;&lt;h2 id="heres-what-i-cover"&gt;Here’s What I Cover&lt;/h2&gt;&lt;ul&gt; &lt;li&gt;I discuss model objects in terms of integrating Swift with Firebase. The model objects in Swift will correspond to a JSON data model implemented in Firebase. I will use actual burial data from my NMCP Finder app for my example.&lt;/li&gt; &lt;li&gt;I will show the long, tedious form of creating model objects using if-let unwrapping on each property.&lt;/li&gt; &lt;li&gt;I will factor out the use of if-let for unwrapping.&lt;/li&gt; &lt;li&gt;I will apply operator overloading to further reduce repetitive code when creating model objects.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;I am creating model objects through my own Swift code. I use a third-party library, &lt;a href="https://github.com/SwiftyJSON/SwiftyJSON"&gt;SwiftyJSON&lt;/a&gt;, to ease the retrieval of JSON data. There are other libraries that can go a step further and map your model objects to JSON. Some of these include &lt;a href="https://github.com/thoughtbot/Argo"&gt;Argo&lt;/a&gt;, &lt;a href="https://github.com/Hearst-DD/ObjectMapper"&gt;ObjectMapper&lt;/a&gt; and &lt;a href="https://github.com/JohnSundell/Unbox"&gt;Unbox&lt;/a&gt;. Their drawback is the loss of fine control and understanding you get when writing your own code along with having another dependency to maintain. With Swift 3, creating model objects can be efficient enough where there is not much to gain from employing a third-party library for this task.&lt;/p&gt;&lt;h2 id="json-schema-for-a-burial-model-object"&gt;JSON Schema for a Burial Model Object&lt;/h2&gt;&lt;p&gt;Let’s have a look at the JSON that I will be using for my example. It is in a form that shows the keys and their value types. This is one way to establish a data model for Firebase.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt; &lt;span class="nx"&gt;burialID&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;birth&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;branches&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;buriedAt&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;marker_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;section&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;death&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;middleNameAndOrOtherName&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ranks&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;relatedAs&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="lineno"&gt;15 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;16 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id="making-a-swift-model-object"&gt;Making a Swift Model Object&lt;/h2&gt;&lt;p&gt;It’s pretty straightforward to translate this JSON dictionary into a Swift struct. Here are the properties that correspond to the keys in the JSON schema.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="c1"&gt;/// A burial record.&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Burial&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;birth&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;branches&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;buriedAt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BurialSite&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;death&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;firstName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;lastName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;middleNameAndOrOtherName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;ranks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Rank&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;relations&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RelatedAs&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;The task is now to load the data from the JSON retrieved from Firebase into this native Swift data structure. Let’s first do it the long way using if-let unwrapping to get all the values from the JSON into our struct.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="c1"&gt;/// Init a Burial from raw JSON data retrieved from Firebase.&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="kd"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonDictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonDictionary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwBirth&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;birth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birth&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uwBirth&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwBranches&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;branches&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;arrayObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;uwBranches&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Branch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uwItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;15 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;16 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;17 &lt;/span&gt; &lt;span class="lineno"&gt;18 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwBuriedAt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;branches&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;dictionaryObject&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;19 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buriedAt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BurialSite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonDictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;uwBuriedAt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;20 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;21 &lt;/span&gt; &lt;span class="lineno"&gt;22 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwDeath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;death&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;23 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;death&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uwDeath&lt;/span&gt; &lt;span class="lineno"&gt;24 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;25 &lt;/span&gt; &lt;span class="lineno"&gt;26 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwFirstName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;27 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uwFirstName&lt;/span&gt; &lt;span class="lineno"&gt;28 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;29 &lt;/span&gt; &lt;span class="lineno"&gt;30 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwLastName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;31 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uwLastName&lt;/span&gt; &lt;span class="lineno"&gt;32 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;33 &lt;/span&gt; &lt;span class="lineno"&gt;34 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwOtherName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;35 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;middleNameAndOrOtherName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uwOtherName&lt;/span&gt; &lt;span class="lineno"&gt;36 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;37 &lt;/span&gt; &lt;span class="lineno"&gt;38 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwRanks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ranks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;arrayObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;39 &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;uwRanks&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;40 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Rank&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;41 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ranks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uwItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;42 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;43 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;44 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;45 &lt;/span&gt; &lt;span class="lineno"&gt;46 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwRelatedAs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;relatedAs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;arrayObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;47 &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;uwRelatedAs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;48 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uwItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;RelatedAs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;49 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uwItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;50 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;51 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;52 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;53 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Wow, the if-lets exploded all over the place for a relatively small number of fields. The resulting tedium of having to account for all of them is going to impact our productivity. If-let unwrapping causes so much fatigue because we have to create all those nonsensical temporary constants to hold the value that we want to use.&lt;/p&gt;&lt;h2 id="eliminating-if-let"&gt;Eliminating If-Let&lt;/h2&gt;&lt;blockquote&gt; &lt;p&gt;Ideal code blocks are short and sweet, clear and concise about what they do.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;Can we factor out the use of if-let?&lt;/strong&gt; Yes, there are &lt;em&gt;other&lt;/em&gt; ways to unwrap optionals. The Swift nil-coalescing infix operator consisting of double question marks (??) returns the unwrapped value of an optional if it is not nil. If it is nil, a default value is returned instead.&lt;/p&gt;&lt;p&gt;By assigning all the optional values to temporary constants, we can use this operator to quickly unwrap all of the values. Furthermore, the complex values of arrays and dictionaries can be passed to helper functions as needed.&lt;/p&gt;&lt;p&gt;The following code uses the nil-coalescing operator to unwrap the optional values and is a significant reduction of the if-let mess previously shown.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="c1"&gt;/// Init a Burial from raw JSON data retrieved from Firebase.&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="kd"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonDictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonDictionary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;birth&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;birth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;branches&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;branches&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;arrayObject&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;buriedAt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;buriedAt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;dictionaryObject&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;death&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;death&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;firstName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;lastName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;otherName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;middleNameAndOrOtherName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;ranks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ranks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;arrayObject&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;relatedAs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;relatedAs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;arrayObject&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birth&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;birth&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="lineno"&gt;15 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="bp"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeBranches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="lineno"&gt;16 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buriedAt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeBurialSite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buriedAt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;17 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;death&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;death&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="lineno"&gt;18 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="lineno"&gt;19 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lastName&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="lineno"&gt;20 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;middleNameAndOrOtherName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;otherName&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="lineno"&gt;21 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ranks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ranks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="bp"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeRanks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Rank&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="lineno"&gt;22 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relations&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relatedAs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="bp"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeBurialRelations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RelatedAs&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="lineno"&gt;23 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;It’s still not quite ideal, is it? There’s still some extraneous creation of constants going on.&lt;/p&gt;&lt;h2 id="operator-overloading"&gt;Operator Overloading&lt;/h2&gt;&lt;p&gt;The temporary constants can be eliminated through the use of an infix operator that assigns the optional value from the JSON directly into the model object. For example, for our &lt;code&gt;birth&lt;/code&gt; key in our Burial object, the function syntax will be:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;self.birth &amp;lt;= json["birth"].string &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code to achieve that operator overloading uses Swift generics to represent the types. The left argument is defined as &lt;code&gt;inout&lt;/code&gt; so that the property that is passed in can be mutated.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt;1 &lt;/span&gt;&lt;span class="kr"&gt;infix&lt;/span&gt; &lt;span class="kd"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="lineno"&gt;2 &lt;/span&gt; &lt;span class="lineno"&gt;3 &lt;/span&gt;&lt;span class="c1"&gt;/// Unwrap the right into the left or return the original value of the left.&lt;/span&gt; &lt;span class="lineno"&gt;4 &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="kr"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;inout&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt;5 &lt;/span&gt; &lt;span class="kr"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="lineno"&gt;6 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;7 &lt;/span&gt; &lt;span class="kr"&gt;left&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;right&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kr"&gt;left&lt;/span&gt; &lt;span class="lineno"&gt;8 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Putting that operator into practice is going to alleviate the need to set up any temporary constants and let’s us assign values to our properties directly from the optionals contained in the JSON data.&lt;/p&gt;&lt;p&gt;The final result of applying the techniques of the nil-coalescing operator and our own unwrapping assignment operator is a dramatic lessening of the code needed to unwrap all of the optional values from the burial data retrieved from Firebase.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="c1"&gt;/// Init a Burial from raw JSON data retrieved from Firebase.&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="kd"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonDictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonDictionary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="n"&gt;birth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;birth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="n"&gt;branches&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;branches&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;arrayObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="bp"&gt;map&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeBranches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="n"&gt;buriedAt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;buriedAt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;dictionaryObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="bp"&gt;map&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeBurialSite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="n"&gt;BurialSite&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="n"&gt;death&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;death&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="n"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="n"&gt;middleNameAndOrOtherName&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;middleNameAndOrOtherName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="n"&gt;ranks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ranks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;arrayObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="bp"&gt;map&lt;/span&gt; &lt;span class="lineno"&gt;15 &lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeRanks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Rank&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="lineno"&gt;16 &lt;/span&gt; &lt;span class="n"&gt;relations&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;relatedAs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;arrayObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="bp"&gt;map&lt;/span&gt; &lt;span class="lineno"&gt;17 &lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeBurialRelations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RelatedAs&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="lineno"&gt;18 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Each assignment could easily fit on one line but I’ve chosen to spread out the closures to a second line for additional clarity.&lt;/p&gt;&lt;h2 id="helper-functions"&gt;Helper Functions&lt;/h2&gt;&lt;p&gt;Finally, here is the code for the helper functions that I use to create the complex data structures of Swift arrays and dictionaries used in my model object. They also use the nil-coalescing operator to unwrap the array members that come back from Firebase. Arrays are processed using the native &lt;code&gt;map&lt;/code&gt; in Swift. The burial site dictionary data is used to create a &lt;code&gt;BurialSite&lt;/code&gt; model object that is implemented in a similar way to a &lt;code&gt;Burial&lt;/code&gt;.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="nc"&gt;Burial&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt; &lt;span class="c1"&gt;/// Handles buriedAt is nil and handles failed cast to [String: AnyObject].&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;makeBurialSite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;_&lt;/span&gt; &lt;span class="n"&gt;buriedAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;BurialSite&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;jsonDict&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buriedAt&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonDict&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;BurialSite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonDictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;jsonDict&lt;/span&gt;&lt;span class="p"&gt;!)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BurialSite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="kr"&gt;mutating&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;makeRanks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;_&lt;/span&gt; &lt;span class="n"&gt;rankArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Rank&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rankArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="bp"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Rank&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="lineno"&gt;15 &lt;/span&gt; &lt;span class="kr"&gt;mutating&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;makeBranches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;_&lt;/span&gt; &lt;span class="n"&gt;branchesArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="lineno"&gt;16 &lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;17 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;branchesArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="bp"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Branch&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="lineno"&gt;18 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;19 &lt;/span&gt; &lt;span class="lineno"&gt;20 &lt;/span&gt; &lt;span class="kr"&gt;mutating&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;makeBurialRelations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;_&lt;/span&gt; &lt;span class="n"&gt;relationsArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RelatedAs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="lineno"&gt;21 &lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;22 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;relationsArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="bp"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;RelatedAs&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="lineno"&gt;23 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;24 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this exercise of eliminating if-let unwrapping to create a Swift model object from JSON data retrieved from Firebase, I’ve shown how straightforward and compact it can be to write our own mapping code. Our init of &lt;code&gt;init(jsonDictionary: [String: AnyObject])&lt;/code&gt; was transformed from 53 lines down to a potential 14 by using some programming techniques found in Swift 3.&lt;/p&gt;&lt;p&gt;The overall goal here was not to have the code take up the smallest amount of space. Rather, it was to reduce the nonsense of having to make &lt;em&gt;N&lt;/em&gt; number of temporary constants for the &lt;em&gt;N&lt;/em&gt; data keys we want when using if-let unwrapping. Employing the nil-coalescing operator (??) and operator overloading along with compact functional mapping allows us to accomplish a more concise result while separating the operations for creating a Swift model object into clear sections.&lt;/p&gt;&lt;p&gt;There are many libraries that can create your model objects for you. I do not recommend using them until you have become proficient with creating your own model objects in standard Swift. You may discover, like me, that libraries are more of a hindrance than a help when it comes to implementing your data model. I started to make my model objects using Argo and came across some obscure errors involving the limits of function currying and decided the effort to debug them wasn’t worth it.&lt;/p&gt;&lt;p&gt;With my method for creating model objects in Swift, I have total control over how every data item is used and all without a single if-let being used for unwrapping of that data. You would only know how beautiful that is if you have also reached the level of fatigue that I have from if-let unwrapping. Additionally, the reduction of third-party dependencies is refreshing. I have thereby shown how invigorating it can be to create your own model objects.&lt;/p&gt;</description><link>http://www.ikiApps.com/tutorials/2017/03/01/firebase-json-data-model-objects-swift</link> <guid>http://www.ikiApps.com/tutorials/2017/03/01/firebase-json-data-model-objects-swift</guid> <pubDate>2017-03-01T00:00:00+00:00</pubDate> </item><item><title>Quickly Implement User Roles in Firebase</title> <description>&lt;p&gt;Today, I have a look at Firebase security rules for the purpose of implementing user roles. I share a quick example that includes both a database and corresponding rules to help you get up to speed with the format.&lt;/p&gt;&lt;p&gt;There’s no convenient interface in Firebase where roles can be readily added. The semantics are instead defined both through the JSON database along with the logic in the security rules.&lt;/p&gt;&lt;p&gt;Let’s say I have a &lt;code&gt;secret_data&lt;/code&gt; path that I want to only be accessed only if a user is a &lt;code&gt;paid_user&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;My database looks like this.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;roles&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;admin_user&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;free_user&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;paid_user&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;335Fq6U6gZPWNEyDJRZd6ZYGkvn1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;secret_data&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;access_code&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;390399333&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;users&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;335Fq6U6gZPWNEyDJRZd6ZYGkvn1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="lineno"&gt;15 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;users&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;16 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;335Fq6U6gZPWNEyDJRZd6ZYGkvn1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;17 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test_user&amp;quot;&lt;/span&gt; &lt;span class="lineno"&gt;18 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;19 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;20 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;The choice of where I place the roles is entirely up to me and how I want to work with my data. The only structure that is imposed on me is the JSON hierarchy.&lt;/p&gt;&lt;p&gt;It helps to restrict all access by default. That is easily accomplished by making the top level read and write in the rules be both false (lines 2–4 below).&lt;/p&gt;&lt;p&gt;Getting access to the &lt;code&gt;secret_data&lt;/code&gt;, a path in my JSON database, involves setting up a boolean evaluation of the existence of my uid within the &lt;code&gt;paid_user&lt;/code&gt; path.&lt;/p&gt;&lt;p&gt;I look at the tree, starting at roles and descend into &lt;code&gt;paid_user&lt;/code&gt; and check for the existence of my uid within that path (line 8 below).&lt;/p&gt;&lt;p&gt;I’ve also added an additional check to verify that my uid also appears within the users that are authorized to access the secret data (line 9 below).&lt;/p&gt;&lt;p&gt;In other words, the implementation of my security model can be as complex as I want it to be.&lt;/p&gt;&lt;p&gt;There is an additional check of matching my uid to the logged-in user’s uid to be able to access any user information there (line 12 below).&lt;/p&gt;&lt;p&gt;In this case, that additional check is completely redundant because the preceding logic will override anything below.&lt;/p&gt;&lt;p&gt;That is why the top level read, write rules must be set to false.&lt;/p&gt;&lt;p&gt;Here are the security rules as I’ve described them.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;rules&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;.read&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;.write&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;Secret&lt;/span&gt; &lt;span class="err"&gt;data&lt;/span&gt; &lt;span class="err"&gt;is&lt;/span&gt; &lt;span class="err"&gt;only&lt;/span&gt; &lt;span class="err"&gt;available&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;paid&lt;/span&gt; &lt;span class="err"&gt;users.&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;secret_data&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;.read&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(root.child(&amp;#39;roles&amp;#39;).child(&amp;#39;paid_user&amp;#39;).hasChild(auth.uid)) &lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; (data.child(&amp;#39;users&amp;#39;).hasChild(auth.uid))&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;users&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$uid&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;.read&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;($uid === auth.uid)&amp;quot;&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;15 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;16 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;17 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;In conclusion, Firebase allows creating just about any security model you want. The key to creating the rules is to look at your data and match the structure within your rules and then add the appropriate logic. Having a couple consoles open side-by-side facilitates this process.&lt;/p&gt;&lt;p&gt;That’s it for my quick and easy introduction of how to approach making user roles in Firebase.&lt;/p&gt; </description><link>http://www.ikiApps.com/tutorials/2016/08/19/firebase-user-roles</link> <guid>http://www.ikiApps.com/tutorials/2016/08/19/firebase-user-roles</guid> <pubDate>2016-08-19T00:00:00+00:00</pubDate> </item><item><title>Fastest Setup of Samba in an Ubuntu Server Virtual Machine on a Mac</title> <description>&lt;p&gt;This is the fastest and easiest guide to getting Samba running on an Ubuntu Server virtual machine so that files can be accessed in the Mac Finder.&lt;/p&gt;&lt;p&gt;In less than five minutes, you’ll be able to have a working Samba file sharing server.&lt;/p&gt;&lt;iframe width="280" height="212" src="https://www.youtube.com/embed/OGUblets69Q" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;&lt;p&gt;When I have code to run on AWS EC2 instances, I want to test it locally to save money on CPU time. I use an Ubuntu Linux Server installed as a virtual machine on my Mac to do this. I like to be able to work with the files directly on the server inside my Mac apps. To do that I set up Samba file sharing. Unfortunately, Samba doesn’t work out of the box.&lt;/p&gt;&lt;p&gt;I figured out a minimal set of configuration changes to get it working based on a fresh installed Ubuntu Server. That’s what I share with you in my video, so you can save time setting it up for yourself. By the end of the video, you’ll be able to have a configured samba server that allows accessing the files on an Ubuntu Server from the Finder in your Mac.&lt;/p&gt; </description><link>http://www.ikiApps.com/tutorials/2016/07/21/ubuntu-vm-samba-mac</link> <guid>http://www.ikiApps.com/tutorials/2016/07/21/ubuntu-vm-samba-mac</guid> <pubDate>2016-07-21T00:00:00+00:00</pubDate> </item><item><title>Repair Spark Inspector Availability in Xcode</title> <description>&lt;p&gt;Keeping &lt;a href="http://sparkinspector.com"&gt;Spark Inspector&lt;/a&gt; working across new versions of Xcode has been like trying to keep a house of cards upright on a windy day. I’m sharing how I successfully re-enabled the plugin after upgrading to Xcode 7.3.1. After the procedure, the plugin is available under the &lt;strong&gt;Debug&lt;/strong&gt; and &lt;strong&gt;Product&lt;/strong&gt; menus in Xcode.&lt;/p&gt;&lt;p&gt;Neither their website nor the plugin seems to have been updated recently but I still find it useful for certain debugging situations and that’s why I’m sharing this info.&lt;/p&gt;&lt;h2 id="get-the-current-dvtplugincompatibilityuuid"&gt;Get the current DVTPlugInCompatibilityUUID&lt;/h2&gt;&lt;p&gt;The way I was able to get the plugin to work in Xcode up to version 7.3.1 was by adding the DVTPlugInCompatibilityUUID to the Info.plist contained in the Spark Inspector plugin package.&lt;/p&gt;&lt;p&gt;To obtain the correct plugin UUID for your Xcode, use the following command (all on one line):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ defaults read /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The DVTPlugInCompatibilityUUID for Xcode 7.3.1 is&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ACA8656B-FEA8-4B6D-8E4A-93F4C95C362C &lt;/code&gt;&lt;/pre&gt;&lt;h2 id="add-it-to-infoplist"&gt;Add it to Info.plist&lt;/h2&gt;&lt;p&gt;I then added it to the Info.plist found in the plugin package.&lt;/p&gt;&lt;p&gt;The quick way to get to the plugin package is, from within Spark Inspector, by selecting &lt;strong&gt;Getting Started Instructions&lt;/strong&gt; under the &lt;strong&gt;Window&lt;/strong&gt; menu.&lt;/p&gt;&lt;p&gt; &lt;figure class="image"&gt;&lt;img src="/img/2016-05-04-keep-spark-inspector-available-in-xcode/spark-inspector-getting-started.png" alt="Figure 1: Quick way to the plugins folder.Access the Xcode plugins folder using the link within the Spark Inspector app." /&gt; &lt;figcaption&gt;&lt;strong&gt;Figure 1: Quick way to the plugins folder.&lt;/strong&gt; Access the Xcode plugins folder using the link within the Spark Inspector app.&lt;/figcaption&gt; &lt;/figure&gt; &lt;/p&gt;&lt;p&gt;Click the “&amp;gt;” icon next to “We’ve copied a plugin into Xcode’s plugins folder” (Figure 1). This will bring up a window in Finder. The icon might not be visible, or the plugin might not exist, if you have not yet installed the plugin. The plugin can be re-installed by selecting &lt;strong&gt;Re-install Xcode Plugin&lt;/strong&gt; under the &lt;strong&gt;Spark Inspector&lt;/strong&gt; menu.&lt;/p&gt;&lt;p&gt;Right click &lt;strong&gt;SparkInspectorXcodePlugin.xcplugin&lt;/strong&gt; and select &lt;strong&gt;Show Package Contents&lt;/strong&gt; from the menu.&lt;/p&gt;&lt;p&gt;Add the DVTPlugInCompatibilityUUID to the Info.plist and save it.&lt;/p&gt;&lt;p&gt; &lt;figure class="image"&gt;&lt;img src="/img/2016-05-04-keep-spark-inspector-available-in-xcode/load-bundle-view-for-spark-inspector.png" alt="Figure 2: Load Bundle prompt.The Load Bundle button needs to be clicked to load the plugin. Be careful, the load button is not the default!" /&gt; &lt;figcaption&gt;&lt;strong&gt;Figure 2: Load Bundle prompt.&lt;/strong&gt; The Load Bundle button needs to be clicked to load the plugin. Be careful, the load button is not the default!&lt;/figcaption&gt; &lt;/figure&gt; &lt;/p&gt;&lt;p&gt;Restart Xcode. If all is well you should receive a prompt (Figure 2) requesting that the plugin be loaded. &lt;strong&gt;Load Bundle&lt;/strong&gt; should be selected.&lt;/p&gt;&lt;p&gt;Finally, check the &lt;strong&gt;Debug&lt;/strong&gt; and &lt;strong&gt;Product&lt;/strong&gt; menus to make sure the plugin is there.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;If the prompt is not available, you can use the following command to delete the currently linked plugins for Xcode.&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ defaults delete com.apple.dt.Xcode DVTPlugInManagerNonApplePlugIns-Xcode-7.3.1 &lt;/code&gt;&lt;/pre&gt; </description><link>http://www.ikiApps.com/tips/2016/05/04/keep-spark-inspector-available-in-xcode</link> <guid>http://www.ikiApps.com/tips/2016/05/04/keep-spark-inspector-available-in-xcode</guid> <pubDate>2016-05-04T00:00:00+00:00</pubDate> </item><item><title>Build Apps Faster Than Ever Before</title> <description>&lt;p&gt;Would you prefer the time it takes to compile and link your app to be &lt;strong&gt;faster&lt;/strong&gt; or &lt;strong&gt;slower?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If you are not using a RAM disk, then you may be choosing the latter answer. If you don’t already know how to set this up, I’ve created an easy to use script written in Swift 2.2. This one may best suit the pros but we can all appreciate a little less waiting for a computer.&lt;/p&gt;&lt;p&gt;As a side note, Swift may not currently be the most efficient way to write scripts, but being able to do it has a special kind of sparkle that lights up when it is done.&lt;/p&gt;&lt;p&gt;Using the script allows the Derived Data setting to stay the same in Xcode but runs out of RAM instead of the disk. It does this by mounting the RAM disk to the same path that is normally disk-based.&lt;/p&gt;&lt;p&gt;As an added bonus, Derived Data gets wiped every time a new RAM disk is generated. This helps with some problems related to Derived Data.&lt;/p&gt;&lt;p&gt;This saves wear-and-tear on solid state drives, if you are into that kind of thing. If you happen to be using a spinning disk, it’s way faster than that, too.&lt;/p&gt;&lt;p&gt;I’ve been running Xcode like this for years and over that time all those savings can really add up.&lt;/p&gt;&lt;p&gt;It’s easy to create a launch agent, simply a property list file, that allows having the script run every time your computer starts. I’ve included an example of that in the source code.&lt;/p&gt;&lt;p&gt;I’ve even made sure using this technique works with Instruments because there is a need for Spotlight to find symbol files during profiling and debugging.&lt;/p&gt;&lt;p&gt;The script is contained in an Xcode project. The file &lt;code&gt;main.swift&lt;/code&gt; can be copied out and renamed to &lt;code&gt;setupXcodeDerivedDataRAMDisk.swift&lt;/code&gt; and placed in a &lt;code&gt;bin&lt;/code&gt; directory for running from the command-line or a launch agent.&lt;/p&gt;&lt;p&gt;Here is the &lt;a href="https://goo.gl/1zhpT2"&gt;link&lt;/a&gt; to the project.&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;Another tip to improve startup times is to change the Debug Information Format.&lt;/p&gt;&lt;p&gt;See &lt;strong&gt;Build Settings &amp;gt; Build Options &amp;gt; Debug Information Format&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Change &lt;strong&gt;DWARF with dSYM File&lt;/strong&gt; to &lt;strong&gt;DWARF&lt;/strong&gt; for a slight speed increase during every build.&lt;/p&gt;</description><link>http://www.ikiApps.com/tips/2016/03/28/setup-xcode-derived-data-ram-disk</link> <guid>http://www.ikiApps.com/tips/2016/03/28/setup-xcode-derived-data-ram-disk</guid> <pubDate>2016-03-28T00:00:00+00:00</pubDate> </item><item><title>Easy Install of ReactiveCocoa 4 Using CocoaPods</title> <description>&lt;p&gt;I’ve gone through the full manual installation of RAC4 using Git submodules and it’s not that bad but CocoaPods makes it easier to get it going. Using Carthage is another option and one that I may make a comparison with at a later date.&lt;/p&gt;&lt;p&gt;First, you have to know the latest release version of RAC4. The current release of ReactiveCococa is officially reported &lt;a href="https://github.com/ReactiveCocoa/ReactiveCocoa/releases"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I have found plugging in the latest release from that page into my &lt;code&gt;Podfile&lt;/code&gt; can enable the installation of a recent version of RAC4 from the CocoaPods specs on GitHub.&lt;/p&gt;&lt;p&gt;The CocoaPods Specs repository is &lt;a href="https://github.com/CocoaPods/Specs"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;A better source&lt;/strong&gt; of finding the correct version to use for pod installation is &lt;a href="https://libraries.io/cocoapods/ReactiveCocoa/versions"&gt;here&lt;/a&gt; as the CocoaPods Specs repository can be difficult to search due to the large number of entries.&lt;/p&gt;&lt;p&gt;The spec for RAC4 is not actively supported by the maintainers of ReactiveCocoa but there are third-party contributors.&lt;/p&gt;&lt;hr /&gt;&lt;h2 id="cocoapods-install-of-rac4"&gt;CocoaPods Install of RAC4&lt;/h2&gt;&lt;p&gt;As an example, the following &lt;code&gt;Podfile&lt;/code&gt; is sufficient for installing a specific version of RAC4 for use with Swift 2.1.1 using &lt;code&gt;pod install&lt;/code&gt;. I’ve tested this with CocoaPods 1.0.0.beta.2.&lt;/p&gt;&lt;p&gt;Content of my &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;source 'https://github.com/CocoaPods/Specs.git' use_frameworks! platform :ios, '9.0'target "MyXcodeTarget" do pod 'ReactiveCocoa', '= 4.0.0' end &lt;/code&gt;&lt;/pre&gt;&lt;hr /&gt;&lt;p&gt;These instructions successfully install the specified version of RAC4 using CocoaPods 1.0.0.beta.2.&lt;/p&gt;</description><link>http://www.ikiApps.com/tips/2016/02/02/easy-install-rac4-with-cocoapods</link> <guid>http://www.ikiApps.com/tips/2016/02/02/easy-install-rac4-with-cocoapods</guid> <pubDate>2016-02-02T00:00:00+00:00</pubDate> </item><item><title>Signal Chaining in ReactiveCocoa 4 for CloudKit</title> <description>&lt;p&gt;With &lt;a href="http://blog.parse.com/announcements/moving-on/"&gt;Parse going away&lt;/a&gt;, the quest for alternatives begins. &lt;a href="https://developer.apple.com/icloud/"&gt;CloudKit&lt;/a&gt; is one option. No matter what backend one may choose, there are inherent frailties within any app that relies on a backend. Sometimes these weaknesses are only revealed under significant loads or unusual usage patterns and are often a result of a flawed handling of concurrency.&lt;/p&gt;&lt;p&gt;Given the full toolset of delegation, observation, completion handlers, Grand Central Dispatch (GCD) and NSOperations, just about any concurrency situation can be handled. However, the natural complexity involved in employing those tools can lead to subtle flaws that are difficult to reproduce.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;This is where ReactiveCocoa and a signal chaining approach can offer improvement.&lt;/strong&gt; RAC is not necessarily a replacement for the existing tools. Instead it offers an added value environment that allows implementations to be even more functional, in the functional programming sense, than otherwise possible. I’m going to use a typical set of backend operations to illustrate how a functional reactive approach can minimize points of failure within a typical set of linked backend operations.&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;Before I get into that, I want to make a few comments about Swift and ReactiveCocoa.&lt;/p&gt;&lt;p&gt;Swift has made ReactiveCocoa more accessible to me because it is free from the cumbersome syntax of Objective-C. Additionally, static typing has improved my ability to relate to everything within the language, perhaps that is just due to my personal preferences.&lt;/p&gt;&lt;p&gt;There are still some barriers such as the code not reading in a way that is natural to me. For example, signals are chained by returning other signals within Swift closures and that still seems strange but I’m starting to be more comfortable with it.&lt;/p&gt;&lt;p&gt;As long as I remember that the syntax is an ends to a mean, a vehicle to reach a destination, then it becomes more pleasant to work with. The other benefits that Swift offers make up for the slight awkward syntax that results from fitting Swift into a functional reactive approach.&lt;/p&gt;&lt;p&gt;The integration of RAC4 with Swift’s type system is a huge improvement over the previous Objective-C version and truly assists in areas such as propagating errors through a signal chain. Xcode’s handling of Swift types is also extremely helpful when it comes to writing code. Xcode’s documentation features for Swift types is great as I show in an example for the &lt;code&gt;.on()&lt;/code&gt; function in Figure 1.&lt;/p&gt;&lt;p&gt; &lt;figure class="image"&gt;&lt;img src="/img/2016-02-01-signal-chaining-in-reactivecocoa-4-for-cloudkit/type-hints-for-rac4-in-xcode.png" alt="Figure 1: Xcode showing type hints for ReactiveCocoa 4.The function types shown here are an example of how RAC4 makes use of Swift's static type system. Having these hints is the greatest thing to me. The types make it possible to keep track of signals in a way that wasn’t possible before." /&gt; &lt;figcaption&gt;&lt;strong&gt;Figure 1: Xcode showing type hints for ReactiveCocoa 4.&lt;/strong&gt; The function types shown here are an example of how RAC4 makes use of Swift's static type system. Having these hints is the greatest thing to me. The types make it possible to keep track of signals in a way that wasn’t possible before.&lt;/figcaption&gt; &lt;/figure&gt; &lt;/p&gt;&lt;hr /&gt;&lt;h2 id="example-implementation-of-cloudkit-functions"&gt;Example implementation of CloudKit functions&lt;/h2&gt;&lt;p&gt;For my example, I’m going to cover a typical operation when working with any backend, &lt;strong&gt;deleting records.&lt;/strong&gt; I’ll be using CloudKit as my backend.&lt;/p&gt;&lt;p&gt;As an initial, not functional reactive solution, we could retrieve the record IDs into an array and then iterate over that array to delete the matching records.&lt;/p&gt;&lt;p&gt;For my test scenario, I’ll need to first add records on every run.&lt;/p&gt;&lt;p&gt;These operations amount to three distinct functions.&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Add test records.&lt;/li&gt; &lt;li&gt;Retrieve records matching some query.&lt;/li&gt; &lt;li&gt;Perform deletions of records.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;I’ve provided sample code for these three functions here.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="c1"&gt;/// Add a test photo record into the public DB.&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;addTestPhoto&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;recordID&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;CKRecordID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;getUUID&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;photo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;CKRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TypeConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestPhoto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="n"&gt;publicDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;saveRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;photo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="c1"&gt;// Handle the error.&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="c1"&gt;/// Get all of the photos in the public DB and place the results in an Array.&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;getAllPhotos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;completionWithPhotos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;CKRecord&lt;/span&gt;&lt;span class="p"&gt;])-&amp;gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;CKRecord&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;photoPredicate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;NSPredicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;query&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;CKQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TypeConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestPhoto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;photoPredicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="n"&gt;publicDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;performQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inZoneWithID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;foundRecords&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="c1"&gt;// Handle the error.&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foundRecords&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;15 &lt;/span&gt; &lt;span class="n"&gt;completionWithPhotos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;16 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;17 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt;1 &lt;/span&gt;&lt;span class="c1"&gt;/// Delete a record from the public DB.&lt;/span&gt; &lt;span class="lineno"&gt;2 &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;deleteRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;CKRecordID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;3 &lt;/span&gt; &lt;span class="n"&gt;publicDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deleteRecordWithID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completionHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;4 &lt;/span&gt; &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;5 &lt;/span&gt; &lt;span class="c1"&gt;// Handle the error.&lt;/span&gt; &lt;span class="lineno"&gt;6 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="lineno"&gt;7 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;8 &lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="lineno"&gt;9 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Deleting the records that are retrieved using &lt;code&gt;getAllPhotos()&lt;/code&gt; requires that the result is passed to &lt;code&gt;deleteRecord()&lt;/code&gt;. This is where potential points of failure can be introduced using approaches typical to iOS and OS X development.&lt;/p&gt;&lt;p&gt;Due to the asynchronous nature of both retrieving records from the backend and the deletion of those records, getting the two functions to talk to each other can be accomplished in a couple of ways:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Through the completion handler of &lt;code&gt;getAllPhotos()&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Through a property that holds an array of record IDs.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;In both of these cases, it will be found that we have to loop over some collection to perform the deletion.&lt;/p&gt;&lt;p&gt;Here is how it looks using a property, &lt;code&gt;self.recordIDs&lt;/code&gt;, that is an array of record IDs.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="c1"&gt;/// Delete all records matching recordIDs in self.recordIDs. &lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;deleteAllRecords&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;recordID&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recordIDs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="n"&gt;publicDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deleteRecordWithID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completionHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="c1"&gt;// Handle the error&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;In this case, we would have had to have loaded the records from CloudKit into &lt;code&gt;self.recordIDs&lt;/code&gt; ahead of time.&lt;/p&gt;&lt;p&gt;If we instead use the completion handler we could use a function like the one below.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt;1 &lt;/span&gt;&lt;span class="c1"&gt;/// Delete all records that are retrieved by getAllPhotos() using its &lt;/span&gt; &lt;span class="lineno"&gt;2 &lt;/span&gt;&lt;span class="c1"&gt;/// completion handler.&lt;/span&gt; &lt;span class="lineno"&gt;3 &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;deleteAllPhotos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;4 &lt;/span&gt; &lt;span class="n"&gt;getAllPhotos&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;photos&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;5 &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;photo&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;photos&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;6 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deleteRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;photo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;7 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;8 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;9 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;A function here, a property there. This doesn’t seem that bad but over the course of development, all these little additions start to add up. In the worst case, your app’s complexity starts increasing exponentially due to needing to manage all of this additional code every time a change is made.&lt;/p&gt;&lt;p&gt;I’ve seen implementations like this fail under heavy usage even though it can be fine under lighter loads.&lt;/p&gt;&lt;p&gt;Enter ReactiveCocoa.&lt;/p&gt;&lt;h2 id="reactivecocoa-4-implementation-of-cloudkit-record-deleting"&gt;ReactiveCocoa 4 implementation of CloudKit record deleting&lt;/h2&gt;&lt;p&gt;The immediate reason for my stepping into ReactiveCocoa is that it offers a more functional approach that implies greater reliability and elegance in concurrency implementations. The following benefits can be obtained as a result.&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Reducing the lines of code that are actively involved in operations.&lt;/li&gt; &lt;li&gt;Removing intermediary variable allocations that can be points of failure during concurrent operations.&lt;/li&gt; &lt;li&gt;Gaining unified error handling and cancellations.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Instead of adding to the operational complexity of an app, using ReactiveCocoa can have the effect of reducing it.&lt;/p&gt;&lt;h3 id="function-modifications-for-reactivecocoa"&gt;Function modifications for ReactiveCocoa&lt;/h3&gt;&lt;h3 id="retrieve-all-photos-modifications-for-rac"&gt;Retrieve all photos modifications for RAC&lt;/h3&gt;&lt;p&gt;Retrieving all photos in our app can be accomplished with a signal producer that calls our existing photo retrieval function.&lt;/p&gt;&lt;p&gt;In the process, the &lt;strong&gt;completion handler can be eliminated&lt;/strong&gt; from that function thereby eliminating a potential source of error.&lt;/p&gt;&lt;p&gt;Here is the &lt;code&gt;getAllPhotos()&lt;/code&gt; function when used with ReactiveCocoa. The observer is passed into the function so that the function can send events on the signal.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;getAllPhotos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;CKRecordID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;NSError&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;photoPredicate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;NSPredicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;query&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;CKQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TypeConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestPhoto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;photoPredicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="n"&gt;publicDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;performQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inZoneWithID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;foundRecords&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendFailed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;!)&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foundRecords&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendCompleted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h5 id="giving-errors-the-care-they-deserve"&gt;Giving errors the care they deserve&lt;/h5&gt;&lt;p&gt;In addition to removing the completion handler, we have gained a result type that will propagate an error if it occurs through the rather elegant &lt;code&gt;sendFailed()&lt;/code&gt; method. This is much better than handling the error in a completion handler because it will be sent up the entire signal chain. Too often, errors are left unhandled due to the extra work that is involved. ReactiveCocoa minimizes the effort required to setup error handling and this can mean that more errors will be treated properly.&lt;/p&gt;&lt;h4 id="add-photo-and-delete-record-modifications-for-rac"&gt;Add photo and delete record modifications for RAC&lt;/h4&gt;&lt;p&gt;I altered the photo adding and deleting functions, in a likewise manner, to include the observer argument to be able to send events on a signal.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="c1"&gt;/// Photo add function modified for use with ReactiveCocoa.&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;addTestPhoto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;NSError&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;recordID&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;CKRecordID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;getUUID&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;photo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;CKRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TypeConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestPhoto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="n"&gt;publicDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;saveRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;photo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendFailed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;!)&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendCompleted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="c1"&gt;/// Record delete function modified for use with ReactiveCocoa. &lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;deleteRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;CKRecordID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;CKRecordID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;NSError&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt; &lt;span class="n"&gt;publicDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deleteRecordWithID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completionHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendFailed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;!)&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendCompleted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h3 id="wrapping-our-existing-functions-into-signal-producers"&gt;Wrapping our existing functions into signal producers&lt;/h3&gt;&lt;p&gt;The &lt;strong&gt;Signal Producer&lt;/strong&gt; for this method is then implemented by the following function.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt;1 &lt;/span&gt;&lt;span class="c1"&gt;/// Make a signal for adding test photos to CloudKit.&lt;/span&gt; &lt;span class="lineno"&gt;2 &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;testPhotoAdder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SignalProducer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;NSError&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;3 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SignalProducer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;disposable&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;4 &lt;/span&gt; &lt;span class="n"&gt;addTestPhoto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;5 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;6 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;A &lt;strong&gt;Signal Producer&lt;/strong&gt; for deleting photos can be similarly implemented.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt;1 &lt;/span&gt;&lt;span class="c1"&gt;/// Make a signal for deleting records from CloudKit.&lt;/span&gt; &lt;span class="lineno"&gt;2 &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;photoDeleter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;CKRecordID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SignalProducer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;CKRecordID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;NSError&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;3 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SignalProducer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;disposable&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;4 &lt;/span&gt; &lt;span class="n"&gt;deleteRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;5 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;6 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h3 id="final-form-of-the-record-deleting-signal"&gt;Final form of the record deleting signal&lt;/h3&gt;&lt;p&gt;The real magic occurs when the results of the photo retrieval signal are passed to the record deleting signal without the use of intermediary storage and without need for a completion handler.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt;1 &lt;/span&gt;&lt;span class="c1"&gt;/// A signal producer to retrieve records and delete them.&lt;/span&gt; &lt;span class="lineno"&gt;2 &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;deletedPhotos&lt;/span&gt; &lt;span class="lineno"&gt;3 &lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;photosGetter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;flatMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FlattenStrategy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Merge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;4 &lt;/span&gt; &lt;span class="n"&gt;recordID&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SignalProducer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;CKRecordID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;NSError&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;5 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;photoDeleter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recordID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;6 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;The &lt;code&gt;flatMap()&lt;/code&gt; here converts the events of the photo retrieval signal into the signal producer that deletes individual records in CloudKit. The two signals are talking to each other directly without any intermediaries. Code friction is reduced to a minimum making for a smooth ride.&lt;/p&gt;&lt;p&gt;The last thing that remains is to call &lt;code&gt;start()&lt;/code&gt; on &lt;code&gt;deletedPhotos&lt;/code&gt; after test photos have been added to CloudKit. The following code accomplishes this where I’ve used a comparatively inelegant form of ordering the operations in sequence through the RAC-based completion handler for signals.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt;1 &lt;/span&gt;&lt;span class="c1"&gt;/// The photo deleting signal is started after the test photos are added to the &lt;/span&gt; &lt;span class="lineno"&gt;2 &lt;/span&gt;&lt;span class="c1"&gt;/// backend.&lt;/span&gt; &lt;span class="lineno"&gt;3 &lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testPhotoAdder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;startWithCompleted&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;4 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testPhotoAdder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;startWithCompleted&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;5 &lt;/span&gt; &lt;span class="n"&gt;deletedPhotos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt;6 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;7 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id="summary-of-reactivecocoa-signal-chaining-benefits"&gt;Summary of ReactiveCocoa signal chaining benefits&lt;/h2&gt;&lt;p&gt;Chaining signals by returning a signal has been a slippery concept to grasp for me. I understand it is done that way so that it fits into Swift. Instead of getting hung up on the syntax, I am focused on obtaining results according to the theory that is well documented within the &lt;a href="https://github.com/ReactiveCocoa/ReactiveCocoa"&gt;ReactiveCocoa repository&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you can wrap your head around it, the end result can be thoroughly worth it.&lt;/p&gt;&lt;h3 id="eliminating-unnecessary-completion-handlers"&gt;Eliminating unnecessary completion handlers&lt;/h3&gt; &lt;p&gt;Eliminating the need for defining a completion handler is extraordinary considering how many such handlers might be needed without the use of signals in ReactiveCocoa.&lt;/p&gt;&lt;p&gt;Here are a few reasons to reduce use of completion handlers:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Unexpected results can occur when a completion occurs at an unexpected point in time.&lt;/li&gt; &lt;li&gt;Propagating errors through multiple handlers is an exercise in patience.&lt;/li&gt; &lt;li&gt;Code is made more readable by removing extraneous usages.&lt;/li&gt; &lt;/ul&gt;&lt;h3 id="improving-error-handling"&gt;Improving error handling&lt;/h3&gt; &lt;p&gt;Regarding error propagation, the unified error handling that is gained through ReactiveCocoa is a benefit that can be immediately realized.&lt;/p&gt;&lt;h3 id="reducing-intermediary-allocations"&gt;Reducing intermediary allocations&lt;/h3&gt; &lt;p&gt;Using signals has the added benefit of eliminating the need for intermediate memory allocations for variables such as arrays used for processing values. This eliminates yet another potential source of failure during concurrent operations.&lt;/p&gt;&lt;h3 id="reducing-overall-code-complexity"&gt;Reducing overall code complexity&lt;/h3&gt; &lt;p&gt;The overall result of using ReactiveCocoa signals is that the overall operational complexity of an app can be reduced. This ends up giving the following advantages to an app.&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Maintainability is made easier.&lt;/li&gt; &lt;li&gt;Failures are reduced.&lt;/li&gt; &lt;li&gt;User experience is improved.&lt;/li&gt; &lt;/ul&gt;&lt;h3 id="final-opinion"&gt;Final opinion&lt;/h3&gt;&lt;p&gt;It requires fairly comprehensive experience with concurrency in iOS and OS X to appreciate the advantages that ReactiveCocoa offers. ReactiveCocoa 4 makes sense to me in Swift even if the syntax is slightly awkward. Due to Swift’s type safety, RAC4 coding is significantly aided by Xcode (minus the SourceKit crashes). I’m not able to say the same about the Objective-C version.&lt;/p&gt;&lt;p&gt;My purpose in this post was to demonstrate how ReactiveCocoa can improve a typical backend implementation in a way that wouldn’t otherwise be practical using the conventional concurrency toolset in iOS and OS X. I used CloudKit for my example, but other backends would be handled similarly. There is an upfront cost to adapting existing code to use ReactiveCocoa signals but the long-term benefits that I have covered can justify that initial investment.&lt;/p&gt;</description><link>http://www.ikiApps.com/experiences/2016/02/01/signal-chaining-in-reactivecocoa-4-for-cloudkit</link> <guid>http://www.ikiApps.com/experiences/2016/02/01/signal-chaining-in-reactivecocoa-4-for-cloudkit</guid> <pubDate>2016-02-01T00:00:00+00:00</pubDate> </item><item><title>MVVM in Swift with ReactiveCocoa 4</title> <description>&lt;p&gt; &lt;figure class="image"&gt;&lt;img src="/img/2016-01-15-mvvm-in-swift-with-reactivecocoa4/mvc-vs-mvvm-diagram.png" alt="Figure 1: MVC vs MVVM.MVVM is roughly the same as MVC with the addition of a data layer in the form of the View Model that takes over interacting with the Model layer to provide data for presentation by the View layer." /&gt; &lt;figcaption&gt;&lt;strong&gt;Figure 1: MVC vs MVVM.&lt;/strong&gt; MVVM is roughly the same as MVC with the addition of a data layer in the form of the View Model that takes over interacting with the Model layer to provide data for presentation by the View layer.&lt;/figcaption&gt; &lt;/figure&gt; &lt;/p&gt;&lt;p&gt;MVVM and MVC are generalizations of real-world architectures. In the real world, an app’s architecture may not exactly fit a single paradigm. Layers indicate a separation of responsibility and a model architecture can be adapted as necessary to a specific application.&lt;/p&gt;&lt;p&gt;I like to think of MVC and MVVM as representing the minimal amount of architectural separation necessary to manage a functioning app. With experience, you will create your own distinct layers that go beyond these fundamental paradigms to manage the features in your app.&lt;/p&gt;&lt;p&gt;For example, you might need to add a data synchronization layer or a network caching layer. Management of external resources is something that you’ll find falls outside of these model application architectures.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;There is no requirement to use MVVM if you are using RAC4.&lt;/strong&gt; It just happens that RAC integrates well with an MVVM architecture. This is one of the the reasons, I believe, that MVVM has become associated with RAC4.&lt;/p&gt;&lt;p&gt;I’d like to share my insights into MVVM and how it can be implemented in Swift with ReactiveCocoa 4. I provide code excerpts from a working demonstration app to serve as a concrete example of an actual implementation.&lt;/p&gt;&lt;h2 id="about-mvvm"&gt;About MVVM&lt;/h2&gt;&lt;p&gt;MVVM fits the same format as MVC with the difference being that an additional data layer, known as the &lt;strong&gt;View Model (VM)&lt;/strong&gt;, is added to the architecture. &lt;strong&gt;Figure 1&lt;/strong&gt; illustrates this viewpoint of mine.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;All of the data that is to be shown in the UI first goes through the View Model instead of going directly to a view controller.&lt;/strong&gt; The VM also takes over some of the functions of the controller layer in a standard MVC setup. In iOS and OS X, the view controller still serves to manage views. Since the VM is the primary change away from MVC, I’m going to focus most of my discussion on it.&lt;/p&gt;&lt;h2 id="benefits-of-the-view-model"&gt;Benefits of the View Model&lt;/h2&gt;&lt;p&gt;Due to the data now being handled by the VM, instead of being handled by view controllers, the controller layer no longer needs to access the model layer. This reduces the responsibility of view controllers such that &lt;em&gt;they only need to be concerned about handling views.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Overall, this results in a greater balance in the distribution of functions amongst the different code layers. The benefit of this is clearer code offering the possibility of easier maintenance. In contrast, with MVC, view controllers tend to get bloated with data handling functions and view controlling functions making them difficult to manage. With MVVM, view controllers tend to be reduced in size.&lt;/p&gt;&lt;p&gt;All of this talk gives you an idea of what to expect. Let’s look at some code that actually implements an MVVM architecture.&lt;/p&gt;&lt;h2 id="a-common-problem-scenario"&gt;A common problem scenario&lt;/h2&gt;&lt;p&gt;To keep things relevant, the problem that I’ll address in my example is having an app that fetches photos from a backend. This scenario is representative of many network-backed apps where RAC4 can offer significant advantages due to reducing complexity in handling compound asynchronous operations.&lt;/p&gt;&lt;p&gt;This situation highlights common problems that developers face with regard to user experience and performance. Photos are often not ready for immediate display due to the need for them to be retrieved from the network. The time delay imposed by these retrievals can have a negative effect on app performance if any of these operations block a critical thread such as the main UI thread. There can also be a visible delay where the user can see the photo loading into place. This may detract from the overall user experience of your app.&lt;/p&gt;&lt;p&gt;Additionally, with respect to your source code, the number of nested callbacks via completion handlers can increase to the point where it makes the code heavy and difficult to manage and understand.&lt;/p&gt;&lt;p&gt;An MVVM architecture in combination with ReactiveCocoa 4 serves to provide solutions to all of these problems by&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Reducing the complexity of asynchronous operations by offering a streamlined paradigm for handling them via RAC4.&lt;/li&gt; &lt;li&gt;Maintaining a consistent user experience by having data before it is needed or as fast as possible in the View Model.&lt;/li&gt; &lt;li&gt;Improving code organization by distributing functions more evenly than in MVC.&lt;/li&gt; &lt;/ul&gt;&lt;hr /&gt;&lt;p&gt;&lt;strong&gt;Let’s jump into making an MVVM-based mini app to display photos retrieved from a Parse backend.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;It’s going to display random photos from Parse using a view that is updated from a View Model where the photos are fetched using ReactiveCocoa 4.&lt;/strong&gt;&lt;/p&gt;&lt;hr /&gt;&lt;h2 id="making-a-view-model"&gt;Making a View Model&lt;/h2&gt;&lt;p&gt;The essential components of a VM in Swift include a class to encapsulate the data that will be used by the UI. This can be in the form of properties to hold the data that will be used for presentation. In my implementation, the properties in the view controller mirror the properties of the View Model making for a 1:1 correspondence.&lt;/p&gt;&lt;p&gt;Here is the outline for my View Model class in Swift.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;Foundation&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;ReactiveCocoa&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="nc"&gt;ViewModelUpdatable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;viewModelDidUpdate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt;&lt;span class="c1"&gt;/// A View Model class that holds photos that are retrieved asynchronously &lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt;&lt;span class="c1"&gt;/// from a backend.&lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;NSObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;sharedInstance&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="c1"&gt;/// Used to update the UI via delegation.&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="kr"&gt;weak&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ViewModelUpdatable&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="lineno"&gt;15 &lt;/span&gt; &lt;span class="lineno"&gt;16 &lt;/span&gt; &lt;span class="c1"&gt;/// Used to update the UI via KVO.&lt;/span&gt; &lt;span class="lineno"&gt;17 &lt;/span&gt; &lt;span class="kr"&gt;dynamic&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;somePhoto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;UIImage&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="lineno"&gt;18 &lt;/span&gt; &lt;span class="lineno"&gt;19 &lt;/span&gt; &lt;span class="c1"&gt;/// Load photos from a RAC4 signal.&lt;/span&gt; &lt;span class="lineno"&gt;20 &lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;loadData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;21 &lt;/span&gt; &lt;span class="n"&gt;DataLayer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;photoSignalProducer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt;22 &lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;23 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kvoPhoto&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="lineno"&gt;24 &lt;/span&gt; &lt;span class="lineno"&gt;25 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kvoPhotoArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="bp"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;photoLimit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;26 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kvoPhotoArray&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="lineno"&gt;27 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;28 &lt;/span&gt; &lt;span class="lineno"&gt;29 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;photo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;30 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kvoPhotoArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;photo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;31 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;32 &lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;33 &lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;invalidate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt;34 &lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt;35 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;36 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;In my code, I’ve included both &lt;strong&gt;a protocol&lt;/strong&gt; and &lt;strong&gt;a dynamic property&lt;/strong&gt; for the purpose of implementing a couple of different ways of letting my UI know what to display.&lt;/p&gt;&lt;h3 id="two-ways-of-updating-the-ui-from-the-vm"&gt;Two ways of updating the UI from the VM&lt;/h3&gt;&lt;h4 id="observation-via-kvo"&gt;Observation via KVO&lt;/h4&gt; &lt;p&gt;My VM inherits from &lt;code&gt;NSObject&lt;/code&gt; so that KVO can be used on Swift properties declared as &lt;code&gt;dynamic&lt;/code&gt;. The reason for this is so that properties in the &lt;strong&gt;View&lt;/strong&gt; layer can be bound to the properties in the &lt;strong&gt;View Model&lt;/strong&gt; layer. When these properties are bound, changes in the View Model are automatically reflected in the user interface.&lt;/p&gt;&lt;h4 id="delegation"&gt;Delegation&lt;/h4&gt; &lt;p&gt;An alternative method of having the UI updated by the View Model is to use delegation. This is the reason I have listed the &lt;code&gt;ViewModelUpdatable&lt;/code&gt; protocol that includes a function that can be called any time the UI is to be updated. In this case, my view controller subclass would conform to the protocol and implement the delegate method. The UI would then be updated by calling &lt;code&gt;delegate.viewModelDidUpdate()&lt;/code&gt; in the VM.&lt;/p&gt;&lt;p&gt;This method of delegation offers the most control over when to update the UI from the View Model.&lt;/p&gt;&lt;hr /&gt;&lt;h2 id="a-truly-minimal-view-controller-for-the-view-layer"&gt;A truly minimal view controller for the View layer&lt;/h2&gt;&lt;p&gt;Instead of a view controller bloated with functions for handling data, MVVM offers the opportunity to have a truly minimal view controller by limiting the responsibility of the controller to only handling its views. All data is pre-processed for display by the VM layer.&lt;/p&gt;&lt;p&gt;In my example view controller below, I have incorporated two methods for updating the views from the View Model.&lt;/p&gt;&lt;p&gt;One method uses KVO as shown by my observer registrations and de-registrations along with the &lt;code&gt;observeValueForKeyPath:ofObject:change:context:&lt;/code&gt; method to handle property changes as they occur.&lt;/p&gt;&lt;p&gt;The other method uses delegation where the controller is conforming to &lt;code&gt;ViewModelUpdatable&lt;/code&gt; and implementing the required delegate method &lt;code&gt;updateView&lt;/code&gt;. The delegate method can then be called whenever the user interface needs to be updated by the View Model.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;UIKit&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;UIViewController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ViewModelUpdatable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="kr"&gt;@IBOutlet&lt;/span&gt; &lt;span class="kr"&gt;weak&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;UIImageView&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;kvoContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;UInt8&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="c1"&gt;/// The View Model instance for this view controller.&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;vm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="kr"&gt;required&lt;/span&gt; &lt;span class="kd"&gt;init&lt;/span&gt;&lt;span class="p"&gt;?(&lt;/span&gt;&lt;span class="n"&gt;coder&lt;/span&gt; &lt;span class="n"&gt;aDecoder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;NSCoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="kc"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aDecoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forKeyPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;kvoPhoto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;kvoContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;15 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;16 &lt;/span&gt; &lt;span class="lineno"&gt;17 &lt;/span&gt; &lt;span class="kd"&gt;deinit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;removeObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forKeyPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;kvoPhoto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;18 &lt;/span&gt; &lt;span class="lineno"&gt;19 &lt;/span&gt; &lt;span class="kr"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;viewWillAppear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;20 &lt;/span&gt; &lt;span class="kc"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viewWillAppear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;21 &lt;/span&gt; &lt;span class="n"&gt;updateView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt;22 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;23 &lt;/span&gt; &lt;span class="lineno"&gt;24 &lt;/span&gt; &lt;span class="c1"&gt;/// Update the UI from the View Model using delegation in Swift.&lt;/span&gt; &lt;span class="lineno"&gt;25 &lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;viewModelDidUpdate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kvoPhoto&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;26 &lt;/span&gt; &lt;span class="lineno"&gt;27 &lt;/span&gt; &lt;span class="c1"&gt;/// Update the UI from the View Model using KVO in Swift.&lt;/span&gt; &lt;span class="lineno"&gt;28 &lt;/span&gt; &lt;span class="kr"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;observeValueForKeyPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="lineno"&gt;29 &lt;/span&gt; &lt;span class="n"&gt;ofObject&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="lineno"&gt;30 &lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;]?,&lt;/span&gt; &lt;span class="lineno"&gt;31 &lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;UnsafeMutablePointer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;32 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;kvoContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;33 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;chg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;34 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;keyPath&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;kvoPhoto&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;35 &lt;/span&gt; &lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;new&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="lineno"&gt;36 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;37 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;38 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;39 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;40 &lt;/span&gt; &lt;span class="lineno"&gt;41 &lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;updateView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kvoPhoto&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;42 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id="a-model-layer-with-a-parse-backend"&gt;A Model layer with a Parse backend&lt;/h2&gt;&lt;p&gt;Finally, the data access layer corresponding to the Model in my MVVM architecture is implemented as a separate Swift class. It accesses the Parse.com backend to retrieve photos for the View Model.&lt;/p&gt;&lt;p&gt;Using RAC4 gives us some conveniences by allowing the declaration of a &lt;strong&gt;result type&lt;/strong&gt; for the signal producer that includes both the photo result along with any errors that occur during retrieval.&lt;/p&gt;&lt;p&gt;A &lt;code&gt;shouldShowPhoto()&lt;/code&gt; function is used to randomly choose a photo for display.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;Foundation&lt;/span&gt; &lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;ReactiveCocoa&lt;/span&gt; &lt;span class="lineno"&gt; 3 &lt;/span&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;Parse&lt;/span&gt; &lt;span class="lineno"&gt; 4 &lt;/span&gt; &lt;span class="lineno"&gt; 5 &lt;/span&gt;&lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;DataError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ErrorType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;parseQueryError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSError&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;parseDataError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSError&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="lineno"&gt; 8 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt; 9 &lt;/span&gt; &lt;span class="lineno"&gt;10 &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DataLayer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;11 &lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;sharedInstance&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DataLayer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;globalCounter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="lineno"&gt;13 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;photoCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;UInt32&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="lineno"&gt;15 &lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;randomPhotoSignalProducer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SignalProducer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="n"&gt;DataError&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;16 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SignalProducer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;disposable&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;17 &lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;query&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PFQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TestPhoto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt;18 &lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findObjectsInBackgroundWithBlock&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;19 &lt;/span&gt; &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;objs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;20 &lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendFailed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseQueryError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="lineno"&gt;21 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="lineno"&gt;22 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;23 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;index&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="lineno"&gt;24 &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;objs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;25 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shouldShowPhoto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;photoCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;photoCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;26 &lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;photoFile&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;photo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;27 &lt;/span&gt; &lt;span class="n"&gt;photoFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getDataInBackgroundWithBlock&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="lineno"&gt;28 &lt;/span&gt; &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;photoData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;29 &lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendFailed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseDataError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="lineno"&gt;30 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="lineno"&gt;31 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;32 &lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;photoData&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="lineno"&gt;33 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;34 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;35 &lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="lineno"&gt;36 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;37 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;38 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;39 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;40 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;41 &lt;/span&gt; &lt;span class="lineno"&gt;42 &lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;shouldShowPhoto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;photoCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;UInt32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="lineno"&gt;43 &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arc4random_uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;photoCount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="lineno"&gt;44 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="lineno"&gt;45 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;In my example, I’ve using both the View Model and Model layer in static instances via their ‘sharedInstance’ properties. This was for the purpose of testing the use of the View Model as pre-fetched data cache. Separating data handling from the view controller enables a complete VM to be ready before the view needs to be displayed.&lt;/p&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;I’ve covered the main components of MVVM, illustrated in &lt;strong&gt;Figure 1&lt;/strong&gt; and implemented using Swift and ReactiveCocoa 4.&lt;/p&gt;&lt;p&gt;It’s the VM that separates MVVM from MVC. In my View Model, I’ve shown two methods of updating the user interface, &lt;strong&gt;observation via KVO&lt;/strong&gt; and &lt;strong&gt;delegation&lt;/strong&gt;. I’ve combined both of these methods in my example source code for the sake of comparison. Either method alone would be sufficient for getting data in the VM to be updated in the View layer. Using KVO requires that the VM inherits from &lt;code&gt;NSObject&lt;/code&gt; and that properties are marked as &lt;code&gt;dynamic&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In iOS and OS X, the View layer consists of the view controller and its views where the view controller has the limited responsibility of handling views instead of interfacing with the Model layer as it would in the MVC paradigm.&lt;/p&gt;&lt;p&gt;I’ve identified a few advantages in using an MVVM architecture implemented with RAC4.&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Reducing the complexity of asynchronous operations using ReactiveCocoa.&lt;/li&gt; &lt;li&gt;Maintaining a consistent user experience by managing data in the VM.&lt;/li&gt; &lt;li&gt;Improving code organization by distributing functions more evenly than with MVC.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;In my example, it can be seen that RAC4 is only used within the Model and View Model layers. This provides the added benefits of having the View layer be independent of more complex operations used to handle data and having data for views be testable without dependencies on the UI. In other words, an app could be tested without the explicit need for UI testing.&lt;/p&gt;&lt;p&gt;MVVM, as I see it it, is not much different from MVC. I’ve shown that it can be implemented primarily by creating a separate data layer in the form of a View Model. You may have already created such a layer, such as for a data cache, without ever considering it as being a View Model. Now that you know how simple it is to move between MVC and MVVM, I hope that you’ll have the flexibility to explore how each paradigm can apply to your apps.&lt;/p&gt;</description><link>http://www.ikiApps.com/experiences/2016/01/15/mvvm-in-swift-with-reactivecocoa4</link> <guid>http://www.ikiApps.com/experiences/2016/01/15/mvvm-in-swift-with-reactivecocoa4</guid> <pubDate>2016-01-15T00:00:00+00:00</pubDate> </item><item><title>Making It So Users Can Cancel a Google Drive Login on iOS 9</title> <description>&lt;p&gt;In working with the Google Drive SDK for iOS, one can appreciate its broad support for many different use cases including multiple iOS versions. Perhaps further updates are necessary as using the library in a Swift world requires significant effort.&lt;/p&gt;&lt;p&gt;After successfully integrating the SDK into a production app I can share some tips for making it a smoother experience.&lt;/p&gt;&lt;p&gt;For reference, the install guide by Google can be found &lt;a href="https://developers.google.com/drive/ios/quickstart?ver=swift"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;The OAuth2-based login screen had a UI problem where it wasn’t showing a cancel button thereby preventing cancellation of the login by users.&lt;/p&gt;&lt;p&gt;I’m listing some changes to &lt;code&gt;GTMOAuth2ViewControllerTouch.m&lt;/code&gt; that will add a cancel button to the login screen.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-objective-c" data-lang="objective-c"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;viewDidLoad&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt; &lt;span class="n"&gt;viewDidLoad&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;setUpNavigation&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="c1"&gt;// ADD THIS CODE TO THIS METHOD:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navigationController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navigationBar&lt;/span&gt; &lt;span class="nl"&gt;setTitleTextAttributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="l"&gt;@{&lt;/span&gt; &lt;span class="nl"&gt;NSForegroundColorAttributeName&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;UIColor&lt;/span&gt; &lt;span class="n"&gt;blueColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="l"&gt;}&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navigationController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navigationBar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translucent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;deviceWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;UIScreen&lt;/span&gt; &lt;span class="n"&gt;mainScreen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;navBarHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="bp"&gt;UINavigationBar&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;navBar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;UINavigationBar&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithFrame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGRectMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deviceWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;navBarHeight&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="nl"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;navBar&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="bp"&gt;UIBarButtonItem&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cancelItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;UIBarButtonItem&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithTitle&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="nl"&gt;stringWithFormat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;NSLocalizedString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Cancel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="nl"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;UIBarButtonItemStylePlain&lt;/span&gt; &lt;span class="nl"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;cancelLogin&lt;/span&gt;&lt;span class="p"&gt;:)];&lt;/span&gt; &lt;span class="bp"&gt;UINavigationItem&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;navBarItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;UINavigationItem&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Google Drive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;navBarItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rightBarButtonItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cancelItem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;navBar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="nl"&gt;arrayWithObjects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;navBarItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;// ADD THIS METHOD:&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;cancelLogin:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;sender&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;dismissViewControllerAnimated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;YES&lt;/span&gt; &lt;span class="nl"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setUpNavigation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;rightBarButtonItem_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;navButtonsView_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navigationItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rightBarButtonItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rightBarButtonItem_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;hr /&gt;&lt;p&gt;The final result.&lt;/p&gt;&lt;p&gt;&lt;img src="/img/2016-01-10-cancel-button-for-google-drive-login/google-drive-login-with-cancel.png" alt="" /&gt;&lt;/p&gt; </description><link>http://www.ikiApps.com/tips/2016/01/10/cancel-button-for-google-drive-login</link> <guid>http://www.ikiApps.com/tips/2016/01/10/cancel-button-for-google-drive-login</guid> <pubDate>2016-01-10T00:00:00+00:00</pubDate> </item><item><title>ReactiveCocoa 4 Signals Teach Us an Important Lesson About Concurrency</title> <description>&lt;p&gt;You may come across this situation while working with RAC4:&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;You’ve created a Signal. You’ve setup a simple observer on the signal so that the values can be printed from it.&lt;/p&gt;&lt;p&gt;For some reason, no matter what you try, the results do not get processed from the Signal.&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;Here is a trivial sample signal.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;testSignal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendCompleted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Here is a trivial observe action on the signal.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;printIt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;-&amp;gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;next &lt;/span&gt;&lt;span class="si"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;testSignal&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;observeNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printIt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Can you answer what the output will be? Remember, whatever you have tried has failed to produce any result. So the answer is, you get no output here.&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;Is it a bug? No.&lt;/p&gt;&lt;p&gt;The reason is due to simple call order.&lt;/p&gt;&lt;p&gt;When &lt;code&gt;observeNext()&lt;/code&gt; is reached in the chain, &lt;code&gt;testSignal()&lt;/code&gt; has already completed because it &lt;strong&gt;blocked&lt;/strong&gt; the current thread.&lt;/p&gt;&lt;p&gt;Making the signal values available requires that execution &lt;strong&gt;falls through&lt;/strong&gt; to &lt;code&gt;observeNext()&lt;/code&gt; before &lt;code&gt;testSignal()&lt;/code&gt; completes.&lt;/p&gt;&lt;p&gt;There is nothing to observe if the signal &lt;strong&gt;blocks&lt;/strong&gt; the observation of the signal.&lt;/p&gt;&lt;p&gt;This problem can be solved by redirecting the &lt;code&gt;sendNext()&lt;/code&gt; calls to be asynchronous as in the following modified sample signal.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Swiss cheese test signal: It has holes to fall through.&lt;/span&gt; &lt;span class="c1"&gt;// dispatch_async() on the main thread is sufficient to allow falling through.&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;testSignal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dispatch_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;The output now is:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;next 0 next 1 next 2 next 3 next 4 next 5 next 6 next 7 next 8 next 9 &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you were having trouble understanding when individual operations are getting called in a signal chain, hopefully this post has helped you get past that. Consideration of sync vs async is rampant in iOS and OS X development and extremely important to recognize.&lt;/p&gt;&lt;p&gt;In simple terms, either an operation is &lt;strong&gt;blocking&lt;/strong&gt; or it allows &lt;strong&gt;falling through&lt;/strong&gt; to the next operation.&lt;/p&gt;&lt;p&gt;Libraries like RAC4 that help to make creating software more efficient by leveraging alternative concurrency paradigms especially require this discernment.&lt;/p&gt; </description><link>http://www.ikiApps.com/experiences/2016/01/06/rac4-concurrency-lesson</link> <guid>http://www.ikiApps.com/experiences/2016/01/06/rac4-concurrency-lesson</guid> <pubDate>2016-01-06T00:00:00+00:00</pubDate> </item><item><title>My First Peek at Promises in Swift on iOS and OS X</title> <description>&lt;p&gt;There’s a certain tedium in implementing asynchronous operations using the typical patterns common in apps. Typically every call requires a completion handler that either handles the result or handles an error.&lt;/p&gt;&lt;p&gt;I’ve taken a look at &lt;a href="http://promisekit.org"&gt;PromiseKit 3.0.0&lt;/a&gt; as a potential means to reduce some of that effort due to the following advantages&lt;/p&gt;&lt;ul&gt; &lt;li&gt;escape from callback hells&lt;/li&gt; &lt;li&gt;treat async values almost like synchronous values&lt;/li&gt; &lt;li&gt;reduce cognitive overhead in implementing async operations&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The essence of promises is that they turn asynchronous operations into function-like entities. The return value is obtained by &lt;code&gt;then&lt;/code&gt;ing a promise. The following code shows the definition of a promise based on a typical async operation and how the result from that async operation is obtained from the promise.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Sample Promise function form that wraps an existing async op.&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;somePromise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;NSData&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Promise&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;fulfill&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reject&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;asyncOperationWithCompletion&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;fulfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;somePromise&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="c1"&gt;// Do something with the data retrieved from the Promise.&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;As an important note, the async code is executed at the time the Promise function is called. Therefore, the result could be retrieved by &lt;code&gt;then&lt;/code&gt;ing the Promise when it is needed. In PromiseKit, there is even a &lt;code&gt;when&lt;/code&gt; to allow actions to be taken as soon as the result is ready.&lt;/p&gt;&lt;h2 id="chaining-promises"&gt;Chaining Promises&lt;/h2&gt;&lt;p&gt;Instead of descending into a callback chain to perform multiple dependent operations, a Promise chain can be created in a function compositional way. The result of each Promise in this example is passed on to be ingested by the next Promise.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;firstly&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;somePromise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;someResult&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;anotherPromise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;anotherResult&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;anotherPromiseAfterThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anotherResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;anotherResultAfterThat&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="c1"&gt;// Do something with the final result of the Promise chain.&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Handle an error somewhere in the chain.&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;blockquote&gt; &lt;p&gt;WARNING: The documentation at promisekit.org may refer to &lt;code&gt;.catch&lt;/code&gt;. This has been replaced by &lt;code&gt;.error&lt;/code&gt; in Swift. Every place that you see &lt;code&gt;.catch&lt;/code&gt;, &lt;code&gt;.error&lt;/code&gt; should be used instead.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;The Swift generic definition of a Promise as &lt;code&gt;Promise&amp;lt;T&amp;gt;&lt;/code&gt; provides for a clear way of documenting return types such as &lt;code&gt;Promise&amp;lt;String&amp;gt;&lt;/code&gt; directly within code.&lt;/p&gt;&lt;h2 id="chaining-async-calls-with-completion-handlers"&gt;Chaining async calls with completion handlers&lt;/h2&gt;&lt;p&gt;A corresponding callback hell, I mean chain, would look something like&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;someFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;someResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;anotherFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;anotherResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;anotherFunctionAfterThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anotherResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;anotherResultAfterThat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Do something with the final result of the completion chain.&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Handle the error from anotherFunctionAfterThat.&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Handle the error from anotherFunction.&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Handle the error from someFunction.&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Really, it’s the error handling that explodes the callback chain. PromiseKit abstracts that error handling mess away into a single &lt;code&gt;.error&lt;/code&gt; call.&lt;/p&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;PromiseKit may seem like a solution without a problem since you can get to the same end result without it. It could be a solution if you consider meaningful, readable code to be a problem worth solving.&lt;/p&gt;&lt;p&gt;The abstraction benefits that using the Promise type provides makes sense to me. It allows for keeping the logically related components of asynchronous operations together instead of split apart as with the callback form. A flat &lt;code&gt;then&lt;/code&gt; chain is immediately preferable to a nested callback hell.&lt;/p&gt;&lt;p&gt;In Swift, the implementation of promises by PromiseKit is elegant in how it integrates with the language. The benefits are visibly apparent within my simple examples.&lt;/p&gt;&lt;p&gt;Aesthetics are not the only benefit. I also look forward to the effort that can be saved from not having to trace through compound callback mires during development and maintenance of my code.&lt;/p&gt;&lt;p&gt;My conclusion is that promises can bring clarity to the handling of asynchronous operations in Swift in a way that improves our ability to create great user experiences in apps.&lt;/p&gt; </description><link>http://www.ikiApps.com/experiences/2016/01/03/promises-in-ios</link> <guid>http://www.ikiApps.com/experiences/2016/01/03/promises-in-ios</guid> <pubDate>2016-01-03T00:00:00+00:00</pubDate> </item><item><title>Talking Through Delegates and Protocols for iOS and OS X</title> <description>&lt;p&gt;Delegation is probably not easy to grasp for most. It certainly wasn’t for me. I want to change that by putting it in a way that can be understood by my readers and students. Of all things, delegation is one of the most characteristic patterns found throughout iOS and OS X development. I’d argue that it is one of the cornerstones of apps for the Apple ecosystem. It’s a rather perfect mechanism for updating the UI after background operations.&lt;/p&gt;&lt;p&gt;It can even serve to facilitate UI updates for alternate paradigms such as MVVM. See &lt;a href="/experiences/2016/01/15/mvvm-in-swift-with-reactivecocoa4.html"&gt;MVVM in Swift with ReactiveCocoa 4&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="delegate-or-not"&gt;Delegate or not?&lt;/h2&gt;&lt;p&gt;A delegate is someone that performs actions on the behalf of another. If I delegate work to you, the work will be performed by you on my behalf, if you agree. In software terms, our agreement is outlined in a protocol. When you conform to my protocol, that is sufficient for you to be accepted as my delegate.&lt;/p&gt;&lt;h2 id="reasoning-about-delegates"&gt;Reasoning about delegates&lt;/h2&gt;&lt;p&gt;Getting going with delegation can be achieved by answering a few key questions.&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Who is the delegate?&lt;/li&gt; &lt;li&gt;Where to place the protocol?&lt;/li&gt; &lt;li&gt;Where to implement the delegate methods?&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="who-is-the-delegate"&gt;Who is the delegate?&lt;/h2&gt;&lt;p&gt;This is the same as asking “Who needs to do something?” or “Who needs to perform the action?”&lt;/p&gt;&lt;p&gt;The answer is, whoever is performing the action will be the &lt;strong&gt;delegate.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Once you know who the delegate is, it’s easier to determine where to place the delegate protocol and where to create the delegate property.&lt;/p&gt;&lt;p&gt;The delegate protocol, in general, lives with the delegate property since it is someone else who will be the delegate. It is &lt;em&gt;the other class&lt;/em&gt; that is going to conform to the protocol.&lt;/p&gt;&lt;h2 id="where-to-place-the-protocol"&gt;Where to place the protocol?&lt;/h2&gt;&lt;p&gt;Place the protocol with the delegate property. The protocol goes with the property. For a more memorable form, that can be boiled down to &lt;strong&gt;protocol-with-property.&lt;/strong&gt;&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="nc"&gt;ADelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;firstDelegateMethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;secondDelegateMethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kr"&gt;weak&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ADelegate&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id="where-to-implement-the-delegate-methods"&gt;Where to implement the delegate methods?&lt;/h2&gt;&lt;p&gt;Implement the methods where the action is, where the work needs to be done. That’s a &lt;strong&gt;delegate = self&lt;/strong&gt; situation. That’s easy to remember because that’s one of the most common delegate assignments in iOS and OS X programming.&lt;/p&gt;&lt;p&gt;Self can only be a delegate when it conforms to the proper protocol. The protocol lives somewhere else. The protocol is the list of functions that the delegate needs to implement. If you are implementing delegate methods in the class that contains the protocol, then you have probably confused upside with down, an easy mistake to make after going through the delegation spin cycle. 😜&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeOtherClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ImaDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;anObject&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;anObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;// &lt;/span&gt;&lt;span class="cs"&gt;MARK:&lt;/span&gt;&lt;span class="c1"&gt; ImaDelegate Methods&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;firstDelegateMethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;// and so on...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;We use weak properties in Swift for class delegates to prevent retain cycles from occurring.&lt;/p&gt;&lt;h2 id="delegate-protocols"&gt;Delegate protocols&lt;/h2&gt;&lt;p&gt;Does a delegate ever exist without a protocol? In general, no.&lt;/p&gt;&lt;p&gt;A delegate has a type that matches the protocol for the delegate.&lt;/p&gt;&lt;p&gt;To test your understanding, answer what is the difference between a delegate and a protocol?&lt;/p&gt;&lt;h3 id="protocol-naming"&gt;Protocol naming&lt;/h3&gt;&lt;p&gt;OtherViewControllerDelegate is a rather generic name though perfectly appropriate.&lt;/p&gt;&lt;p&gt;OtherViewControllerDataUpdating or OtherViewControllerDataUpdatable would be much more specific and readily identifiable as being something than an ordinary class.&lt;/p&gt;&lt;h2 id="when-to-use-delegation"&gt;When to use delegation&lt;/h2&gt;&lt;p&gt;Anything event-based can benefit from delegation such as making UI updates after asynchronous operations.&lt;/p&gt;&lt;p&gt;A converse example is that delegation would equally apply to responding to a UI event such as a button press. The view containing the button that receives the event can than delegate actions to another class that contains the code needed to handle the event. Because of delegation, a separation of responsibilities can be maintained (this is what MVC is about).&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Using delegation is vital to giving your app the abilities it needs to create an effective user experience.&lt;/p&gt;&lt;p&gt;It’s a slightly more formal approach to handling an event than by other means such as by observation or using a callback due to requiring a protocol.&lt;/p&gt;&lt;p&gt;However, protocols confer the benefit of compile-time checking and serve as an additional source of documentation when named appropriately.&lt;/p&gt;</description><link>http://www.ikiApps.com/tips/2016/01/02/talking-through-delegation</link> <guid>http://www.ikiApps.com/tips/2016/01/02/talking-through-delegation</guid> <pubDate>2016-01-02T00:00:00+00:00</pubDate> </item><item><title>C++ and Swift in Xcode Part 1</title> <description>&lt;p&gt;C++ was the programming language in which I first learned object-oriented programming. I’m now going back to it for integrating it with Objective-C and Swift in Xcode. I’ve always found that building software in other languages can enhance my understanding of programming in a way that goes beyond even advanced study of a single language.&lt;/p&gt;&lt;p&gt;In a series of posts, I’m going to describe my experiences in picking up the language and integrating it with the current version of Swift. I’m going to present this material as a series of loosely organized questions.&lt;/p&gt;&lt;p&gt;When I see Objective-C or Swift they appear as being mostly the same to me. I can readily translate between the two. &lt;strong&gt;This is the level that I want to get to with C++.&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="how-do-you-use-c-in-xcode-with-swift"&gt;How do you use C++ in Xcode with Swift?&lt;/h2&gt;&lt;p&gt;Xcode has built-in support for C++. Support for C++ under LLVM, the default compiler in Xcode, is detailed in &lt;a href="[http://clang.llvm.org/cxx\_status.html](http://clang.llvm.org/cxx_status.html)"&gt;C++ Support in Clang&lt;/a&gt;. For reference, the compiler in Xcode can be set under &lt;strong&gt;Build Settings &amp;gt; Build Options &amp;gt; Compiler for C/C++/Objective-C.&lt;/strong&gt; You may also notice in the build settings that C++ support is currently set for C++11 by default. As an aside, much of the Swift language is currently written in C++.&lt;/p&gt;&lt;h2 id="how-do-you-define-a-function-in-c"&gt;How do you define a function in C++?&lt;/h2&gt;&lt;p&gt;Function definitions are somewhere between Objective-C and Swift. The return type is presented on the left and the arguments are listed within parentheses.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-c--" data-lang="c++"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printHelloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// C++ function code goes here.&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Functions are called much the same as in Swift using parentheses after the function’s name to contain function parameter names and arguments.&lt;/p&gt;&lt;p&gt;C++ is like Objective-C in that functions will not be available publicly unless exposed in a header file. Swift is different in that function scope is &lt;code&gt;public&lt;/code&gt; unless set differently using function modifiers like &lt;code&gt;private&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Also, C++ still uses semicolons to terminate lines like Objective-C!&lt;/p&gt;&lt;h2 id="how-do-you-define-a-class-in-c"&gt;How do you define a class in C++?&lt;/h2&gt;&lt;p&gt;Classes are declared in a header file using syntax similar to Swift.&lt;/p&gt;&lt;p&gt;Classes in C++ need a trailing semicolon.&lt;/p&gt;&lt;p&gt;C++ objects are created using constructors! These are comparable to Swift inits. Constructors can go in the header for a class.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-c--" data-lang="c++"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// C++ constructor code.&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// Function declarations:&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;someFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;anotherFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id="how-can-a-function-in-a-c-class-be-called-in-swift"&gt;How can a function in a C++ class be called in Swift?&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;C++ functions cannot be accessed directly from Swift.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Instead, the C++ functions can be accessed from Objective-C++. An Objective-C++ file is indicated by a file with a .mm extension.&lt;/p&gt;&lt;p&gt;Swift can then call the functions defined in Objective-C++ that are exposed through a bridging header.&lt;/p&gt;&lt;p&gt;Here is a Hello World function defined by two separate files in C++.&lt;/p&gt;&lt;p&gt;Filename: &lt;code&gt;SomeCPPHeader.hpp&lt;/code&gt;&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-c--" data-lang="c++"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt; &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CPPClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CPPClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;This is the constructor.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;printHelloWorld&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Filename: &lt;code&gt;SomeCPPImplementation.cpp&lt;/code&gt;&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-c--" data-lang="c++"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;SomeCPPHeader.hpp&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;CPPClass&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;printHelloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Once the C++ code is in place, it is a matter of connecting the C++ functions to Objective-C++ functions.&lt;/p&gt;&lt;p&gt;Filename: &lt;code&gt;MyOCPPHeader.h&lt;/code&gt;&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-objective-c--" data-lang="objective-c++"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;MyOCPPClass&lt;/span&gt;: &lt;span class="bp"&gt;NSObject&lt;/span&gt;&lt;span class="p"&gt;-(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;printHelloWorldFromCPP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Filename: &lt;code&gt;MyOCPPClass.mm&lt;/code&gt;&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-objective-c--" data-lang="objective-c++"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#import &amp;quot;MyOCPPHeader.h&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;SomeCPPHeader.hpp&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="nc"&gt;MyOCPPClass&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;printHelloWorldFromCPP&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;CPPClass&lt;/span&gt; &lt;span class="n"&gt;helloPrinter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;helloPrinter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printHelloWorld&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;The Objective-C++ functions can then be exposed to Swift by way of a bridging header. In the bridging header, the header for the Objective-C++ code is imported. For this example, the bridging header would contain the following code.&lt;/p&gt;&lt;p&gt;Filename: &lt;code&gt;My-Bridging-Header.h&lt;/code&gt;&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-objective-c" data-lang="objective-c"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#import &amp;quot;MyOCPPHeader.h&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Finally, the C++ code can be run from Swift by calling the connected Objective-C++ code. The following code illustrates this where the connected C++ function &lt;code&gt;CPPClass::printHelloWorld()&lt;/code&gt; is called by way of the Objective-C++ function &lt;code&gt;printHelloWorldFromCPP&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Filename: &lt;code&gt;SomeSwiftFile.swift&lt;/code&gt;&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;OCPPObject&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyOCPPClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;OCPPObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printHelloFromCPP&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;That concludes my initial foray into integrating C++ with Swift. I’ve outlined how to start using C++ classes and functions and how to call a C++ function from Swift through the use of an intermediate Objective-C++ function.&lt;/p&gt; </description><link>http://www.ikiApps.com/experiences/2016/01/01/cpp-in-xcode-part-1</link> <guid>http://www.ikiApps.com/experiences/2016/01/01/cpp-in-xcode-part-1</guid> <pubDate>2016-01-01T00:00:00+00:00</pubDate> </item><item><title>Live Lunr Search for Jekyll</title> <description>&lt;p&gt;Getting live search working in Jekyll was a real accomplishment but the results displayed still need some improvement. For instance, dates are not showing up yet for posts.&lt;/p&gt;&lt;p&gt;At first, the search was completely not working. I was getting errors like this when entering a search term.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Uncaught TypeError: $(...).lunrSearch is not a function &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After some testing, I discovered this problem was fixable by repositioning my loading of jQuery. I moved the loading of it from the end of the body to the end of the head in my template. I’m maintaining a local copy in &lt;code&gt;/js&lt;/code&gt; and loading it with the following statement.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;script src="/js/jquery-1.11.3.min.js"&amp;gt;&amp;lt;/script&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is how to live search looks when searching for the term &lt;code&gt;code&lt;/code&gt;. I noticed that I could not set the minimum length for search terms lower than three characters.&lt;/p&gt;&lt;p&gt;&lt;img src="/img/2015-12-31-search-for-jekyll/jekyll-live-search-1.png" alt="Live search in Jekyll is now working." /&gt;&lt;/p&gt;&lt;p&gt;When I first installed the Ruby gem for &lt;code&gt;jekyll-lunr-js-search&lt;/code&gt;, I received a number of errors. I narrowed all of the errors down to a single dependency, &lt;code&gt;therubyracer&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ gem install therubyracer Fetching: therubyracer-0.12.2.gem (100%) Building native extensions. This could take a while... Successfully installed therubyracer-0.12.2 Parsing documentation for therubyracer-0.12.2 unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/accessor.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/array.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/backref.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/constants.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/constraints.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/context.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/date.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/exception.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/external.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/function.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/gc.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/handles.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/heap.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/init.bundle, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/init.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/invocation.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/locker.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/message.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/object.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/primitive.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/rr.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/script.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/signature.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/stack.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/string.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/template.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/trycatch.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/v8.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for ext/v8/value.o, skipping unable to convert "xCF" from ASCII-8BIT to UTF-8 for lib/v8/init.bundle, skipping Installing ri documentation for therubyracer-0.12.2 1 gem installed &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Curing these conversion errors was accomplished by calling&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ gem install rdoc &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I have the search running on the site at &lt;a href="/search"&gt;/search&lt;/a&gt;. I’ll probably add another post on how the search results can be improved once I solve those problems.&lt;/p&gt;</description><link>http://www.ikiApps.com/experiences/2015/12/31/search-for-jekyll</link> <guid>http://www.ikiApps.com/experiences/2015/12/31/search-for-jekyll</guid> <pubDate>2015-12-31T00:00:00+00:00</pubDate> </item><item><title>Changing Voices in Swift for iOS</title> <description>&lt;p&gt;When your phone speaks to you, what voice is it using?&lt;/p&gt;&lt;p&gt;The quality of digital voices has improved to the point where using text-to-speech (TTS) can provide significant benefits within many contexts.&lt;/p&gt;&lt;p&gt;I’m excited to use TTS in my apps and iOS offers a number of quality voices by default. Getting iOS to talk only requires a few simple steps.&lt;/p&gt;&lt;p&gt;To give you an idea of the voices that are available, I’ve extracted the array of available voices from an iPhone running iOS 9.2.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e30940&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Maged&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17d3e150&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;CZ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Zuzana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e79700&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;da&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Sara&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e50c50&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Anna&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17ec30f0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Melina&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e687f0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;AU&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Karen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e23be0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Daniel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e6ffc0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Moira&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17ec79b0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;US&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Samantha&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Enhanced&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Enhanced&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e795a0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;US&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Samantha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e75900&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ZA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tessa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e27ec0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Monica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17ec5e10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Paulina&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e799c0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;FI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Satu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17ec61c0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;CA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Amelie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e75b10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;FR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Thomas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17ee2460&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;he&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Carmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17ef5140&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Lekha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e6f840&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;HU&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mariska&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e59bd0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Damayanti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17d2c950&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Alice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17ebaec0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ja&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;JP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Kyoko&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17d42100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ko&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;KR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Yuna&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17ee3130&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;BE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ellen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17d637d0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Xander&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e7c8b0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Nora&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17d3e430&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Zosia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e33190&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;BR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Luciana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17eabf00&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Joana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e2a650&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ro&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;RO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ioana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e232b0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ru&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;RU&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Milena&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17ee6830&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Laura&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e64a10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Alva&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e62fc0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;TH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Kanya&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17df4080&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;TR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Yelda&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e76a10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;zh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;CN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ting&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Ting&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Enhanced&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Enhanced&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17db4850&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;zh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;CN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ting&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Ting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e2ecf0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;zh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;HK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Sin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Ji&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt; &lt;span class="mh"&gt;0x17e224c0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;zh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;TW&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mei&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Jia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;iOS has a nice method for setting the voice but there is only support for a single identifier, the Alex voice.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;voice&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AVSpeechSynthesisVoiceIdentifierAlex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;To use another voice, the array of voices can be searched for a matching name.&lt;/strong&gt; The &lt;code&gt;identifier&lt;/code&gt; in the previous call does not match the name of a voice as you might imagine it to.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;voiceToUse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;voice&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;AVSpeechSynthesisVoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speechVoices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="cp"&gt;#available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;iOS&lt;/span&gt; &lt;span class="mf"&gt;9.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;voice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Karen&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;voiceToUse&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;voice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;To use voice, assign the voice using the &lt;code&gt;voice&lt;/code&gt; property on an utterance and then speak the utterance.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;utterance&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;AVSpeechUtterance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello from iOS.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;voice&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;voiceToUse&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;synth&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;AVSpeechSynthesizer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;synth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speakUtterance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</description><link>http://www.ikiApps.com/tips/2015/12/30/setting-voice-for-tts-in-ios</link> <guid>http://www.ikiApps.com/tips/2015/12/30/setting-voice-for-tts-in-ios</guid> <pubDate>2015-12-30T00:00:00+00:00</pubDate> </item><item><title>Making Jekyll Faster by Compressing CSS</title> <description>&lt;p&gt;Compressing CSS source can provide a noticeable performance increase for a static blog. I’ve found this to have made a considerable difference on mobile.&lt;/p&gt;&lt;p&gt;Setting up a pipeline for compressing resources is possible in Jekyll. After trying many of the existing guides out there without success, I finally found a solution that worked for me and I’m sharing it here.&lt;/p&gt;&lt;p&gt;The end result is that my CSS is combined into a single file and it is minified for the fast possible downloading.&lt;/p&gt;&lt;p&gt;I installed two plugins, &lt;code&gt;jekyll-assets&lt;/code&gt; and &lt;code&gt;jekyll-press&lt;/code&gt; using&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;code&gt;sudo gem install jekyll-assets&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;sudo gem install jekyll-press&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;I have the following in _config.yml:&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;gems&lt;/span&gt; &lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;jekyll-assets&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;jekyll-press&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;assets&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dirname&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;assets&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;baseurl&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/assets/&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;compress&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;js&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;uglifier&amp;#39;&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;css&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sass&amp;#39;&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cachebust&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hard&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gzip&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;text/css&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;application/javascript&lt;/span&gt; &lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Another performance improvement can be gained by combining multiple CSS files into a single one. I have my CSS generated by Sass that is combined into a single file using &lt;code&gt;@import&lt;/code&gt; on the individual &lt;code&gt;.scss&lt;/code&gt; files.&lt;/p&gt; </description><link>http://www.ikiApps.com/tips/2015/12/27/jekyll-compressing</link> <guid>http://www.ikiApps.com/tips/2015/12/27/jekyll-compressing</guid> <pubDate>2015-12-27T00:00:00+00:00</pubDate> </item><item><title>Jekyll Code Highlights Conflict with Post Excerpts</title> <description>&lt;p&gt;Jekyll is known as a hacker’s blog parser for a reason and that is because you have to fix its problems yourself to get it to work. The satisfaction you will get from not having to rely on other blogging platforms and their associated overhead will make it worthwhile. There is also a large community that can help you.&lt;/p&gt;&lt;p&gt;While creating content, I encountered an obscure error like&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Liquid Exception: undefined method `t' for nil:NilClass in blog/categories/tips/index.html &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The reason for this was due to the way I was processing truncated content to show post previews for my categories page. I had a value of 50 for the truncation and changing that to 40 words solved the problem.&lt;/p&gt;&lt;p&gt;In other words, a certain amount of normal text must first be present before a code section processed by highlight is allowed.&lt;/p&gt;&lt;p&gt;My content was using a Liquid {% highlight swift %} tag that happened to occur after a certain amount of introductory text. Therefore, the error was dependent upon the length of the text preceding the highlight tag as well as the truncation value used to display excerpted text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;As you can see, the error message perfectly describes that situation.&lt;/strong&gt; 😏&lt;/p&gt;&lt;p&gt;No, the error kind of gets you into the general region, but it takes much more understanding to know how to fix the problem.&lt;/p&gt;&lt;p&gt;I debugged this problem by clearing out &lt;code&gt;_site&lt;/code&gt; and then using &lt;code&gt;jekyll b --trace&lt;/code&gt;. I then found in the source of &lt;code&gt;blog/categories/tips/index.html&lt;/code&gt; an improper handling of a Liquid tag within the truncated excerpt.&lt;/p&gt; </description><link>http://www.ikiApps.com/tips/2015/12/21/jekyll-is-the-blog-parser-fix-yourself</link> <guid>http://www.ikiApps.com/tips/2015/12/21/jekyll-is-the-blog-parser-fix-yourself</guid> <pubDate>2015-12-21T00:00:00+00:00</pubDate> </item><item><title>Changing the Feel of Your iOS or OS X App with Custom Fonts</title> <description>&lt;p&gt;Your app can be more attractive and feel better to users by using custom fonts. Getting them installed and using them is a little tricky.&lt;/p&gt;&lt;p&gt;Font files have to be added in Xcode as a member of your build target. They should also be included in the &lt;strong&gt;Copy Bundle Resources&lt;/strong&gt; portion of the &lt;strong&gt;Build Phases&lt;/strong&gt; in your project.&lt;/p&gt;&lt;ol&gt; &lt;li&gt; &lt;p&gt;The first step is having them added to your target’s &lt;code&gt;Info.plist&lt;/code&gt; under the &lt;code&gt;Fonts provided by application&lt;/code&gt; key. Each member of the Array is the full filename of the font that has been added to your target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The second step is knowing the name to use in your code. The font names can be listed using the following Swift code.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// List all of the installed fonts in iOS.&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;familyName&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;UIFont&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;familyNames&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fontName&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;UIFont&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fontNamesForFamilyName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;familyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family &lt;/span&gt;&lt;span class="si"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;familyName&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s"&gt;, font &lt;/span&gt;&lt;span class="si"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;fontName&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// List all of the installed fonts in OS X.&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;familyName&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;NSFontManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedFontManager&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;availableFontFamilies&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fontName&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;NSFontManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedFontManager&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;availableMembersOfFontFamily&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;familyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family &lt;/span&gt;&lt;span class="si"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;familyName&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s"&gt;, font &lt;/span&gt;&lt;span class="si"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;fontName&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;Here’s an example of code that changes the navigation bar’s title font text in iOS.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;navigationController&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;navigationBar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;titleTextAttributes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;NSFontAttributeName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;UIFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;MY_FONT_NAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSForegroundColorAttributeName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</description><link>http://www.ikiApps.com/tips/2015/12/20/using-custom-fonts-in-ios-osx</link> <guid>http://www.ikiApps.com/tips/2015/12/20/using-custom-fonts-in-ios-osx</guid> <pubDate>2015-12-20T00:00:00+00:00</pubDate> </item><item><title>Path Ordering in Bash</title> <description>&lt;p&gt;Making smart use of bash and scripts written for bash can help you have more time for more important things than administering your system.&lt;/p&gt;&lt;p&gt;Path ordering is especially necessary when you are using many custom executables such as scripts so that the right ones will be called. Do you know how many different versions of Python or git are on your system?&lt;/p&gt;&lt;p&gt;In my &lt;code&gt;.bash_profile&lt;/code&gt; I erase the path or rather start with a minimal path because running a terminal without a minimal path will result in an immediate exit. This would happen if I used &lt;code&gt;unset PATH&lt;/code&gt; to clear the way.&lt;/p&gt;&lt;p&gt;A minimal path in OS X is&lt;/p&gt;&lt;pre&gt;&lt;code&gt;export PATH=/usr/bin:/bin:/usr/sbin:/sbin &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I then use the following &lt;code&gt;pathadd&lt;/code&gt; function to customize the order of the PATH by individually adding path items to the start of the path.&lt;/p&gt;&lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span&gt;&lt;/span&gt;pathadd&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -d &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; *&lt;span class="s2"&gt;&amp;quot;:&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;&lt;/span&gt;* &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# Add to the front of the path.&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;As an example, to add &lt;code&gt;/usr/local/bin&lt;/code&gt; to the path, you can use&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pathadd(/usr/local/bin) &lt;/code&gt;&lt;/pre&gt;</description><link>http://www.ikiApps.com/tips/2015/12/19/path-ordering-in-bash</link> <guid>http://www.ikiApps.com/tips/2015/12/19/path-ordering-in-bash</guid> <pubDate>2015-12-19T00:00:00+00:00</pubDate> </item></channel> </rss>